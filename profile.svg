<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="474" onload="init(evt)" viewBox="0 0 1200 474" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="474" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile.svg -- python caumim/experiments/sensitivity_albumin_for_sepsis.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="463.00"> </text><svg id="frames" x="10" width="1180" total_samples="33070"><g><title>&lt;module&gt; (dowhy/__init__.py:3) (35 samples, 0.11%)</title><rect x="0.0816%" y="164" width="0.1058%" height="15" fill="rgb(227,0,7)" fg:x="27" fg:w="35"/><text x="0.3316%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (35 samples, 0.11%)</title><rect x="0.0816%" y="180" width="0.1058%" height="15" fill="rgb(217,0,24)" fg:x="27" fg:w="35"/><text x="0.3316%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (35 samples, 0.11%)</title><rect x="0.0816%" y="196" width="0.1058%" height="15" fill="rgb(221,193,54)" fg:x="27" fg:w="35"/><text x="0.3316%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (35 samples, 0.11%)</title><rect x="0.0816%" y="212" width="0.1058%" height="15" fill="rgb(248,212,6)" fg:x="27" fg:w="35"/><text x="0.3316%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (35 samples, 0.11%)</title><rect x="0.0816%" y="228" width="0.1058%" height="15" fill="rgb(208,68,35)" fg:x="27" fg:w="35"/><text x="0.3316%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (35 samples, 0.11%)</title><rect x="0.0816%" y="244" width="0.1058%" height="15" fill="rgb(232,128,0)" fg:x="27" fg:w="35"/><text x="0.3316%" y="254.50"></text></g><g><title>&lt;module&gt; (dowhy/causal_identifier/__init__.py:1) (35 samples, 0.11%)</title><rect x="0.0816%" y="260" width="0.1058%" height="15" fill="rgb(207,160,47)" fg:x="27" fg:w="35"/><text x="0.3316%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (35 samples, 0.11%)</title><rect x="0.0816%" y="276" width="0.1058%" height="15" fill="rgb(228,23,34)" fg:x="27" fg:w="35"/><text x="0.3316%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (35 samples, 0.11%)</title><rect x="0.0816%" y="292" width="0.1058%" height="15" fill="rgb(218,30,26)" fg:x="27" fg:w="35"/><text x="0.3316%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (35 samples, 0.11%)</title><rect x="0.0816%" y="308" width="0.1058%" height="15" fill="rgb(220,122,19)" fg:x="27" fg:w="35"/><text x="0.3316%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (35 samples, 0.11%)</title><rect x="0.0816%" y="324" width="0.1058%" height="15" fill="rgb(250,228,42)" fg:x="27" fg:w="35"/><text x="0.3316%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (35 samples, 0.11%)</title><rect x="0.0816%" y="340" width="0.1058%" height="15" fill="rgb(240,193,28)" fg:x="27" fg:w="35"/><text x="0.3316%" y="350.50"></text></g><g><title>&lt;module&gt; (sensitivity_albumin_for_sepsis.py:20) (99 samples, 0.30%)</title><rect x="0.0816%" y="68" width="0.2994%" height="15" fill="rgb(216,20,37)" fg:x="27" fg:w="99"/><text x="0.3316%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (99 samples, 0.30%)</title><rect x="0.0816%" y="84" width="0.2994%" height="15" fill="rgb(206,188,39)" fg:x="27" fg:w="99"/><text x="0.3316%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (99 samples, 0.30%)</title><rect x="0.0816%" y="100" width="0.2994%" height="15" fill="rgb(217,207,13)" fg:x="27" fg:w="99"/><text x="0.3316%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (99 samples, 0.30%)</title><rect x="0.0816%" y="116" width="0.2994%" height="15" fill="rgb(231,73,38)" fg:x="27" fg:w="99"/><text x="0.3316%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (99 samples, 0.30%)</title><rect x="0.0816%" y="132" width="0.2994%" height="15" fill="rgb(225,20,46)" fg:x="27" fg:w="99"/><text x="0.3316%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (99 samples, 0.30%)</title><rect x="0.0816%" y="148" width="0.2994%" height="15" fill="rgb(210,31,41)" fg:x="27" fg:w="99"/><text x="0.3316%" y="158.50"></text></g><g><title>&lt;module&gt; (dowhy/__init__.py:4) (64 samples, 0.19%)</title><rect x="0.1875%" y="164" width="0.1935%" height="15" fill="rgb(221,200,47)" fg:x="62" fg:w="64"/><text x="0.4375%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (64 samples, 0.19%)</title><rect x="0.1875%" y="180" width="0.1935%" height="15" fill="rgb(226,26,5)" fg:x="62" fg:w="64"/><text x="0.4375%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (64 samples, 0.19%)</title><rect x="0.1875%" y="196" width="0.1935%" height="15" fill="rgb(249,33,26)" fg:x="62" fg:w="64"/><text x="0.4375%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (64 samples, 0.19%)</title><rect x="0.1875%" y="212" width="0.1935%" height="15" fill="rgb(235,183,28)" fg:x="62" fg:w="64"/><text x="0.4375%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (64 samples, 0.19%)</title><rect x="0.1875%" y="228" width="0.1935%" height="15" fill="rgb(221,5,38)" fg:x="62" fg:w="64"/><text x="0.4375%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (64 samples, 0.19%)</title><rect x="0.1875%" y="244" width="0.1935%" height="15" fill="rgb(247,18,42)" fg:x="62" fg:w="64"/><text x="0.4375%" y="254.50"></text></g><g><title>&lt;module&gt; (dowhy/causal_model.py:10) (64 samples, 0.19%)</title><rect x="0.1875%" y="260" width="0.1935%" height="15" fill="rgb(241,131,45)" fg:x="62" fg:w="64"/><text x="0.4375%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (64 samples, 0.19%)</title><rect x="0.1875%" y="276" width="0.1935%" height="15" fill="rgb(249,31,29)" fg:x="62" fg:w="64"/><text x="0.4375%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (64 samples, 0.19%)</title><rect x="0.1875%" y="292" width="0.1935%" height="15" fill="rgb(225,111,53)" fg:x="62" fg:w="64"/><text x="0.4375%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (64 samples, 0.19%)</title><rect x="0.1875%" y="308" width="0.1935%" height="15" fill="rgb(238,160,17)" fg:x="62" fg:w="64"/><text x="0.4375%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (64 samples, 0.19%)</title><rect x="0.1875%" y="324" width="0.1935%" height="15" fill="rgb(214,148,48)" fg:x="62" fg:w="64"/><text x="0.4375%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (64 samples, 0.19%)</title><rect x="0.1875%" y="340" width="0.1935%" height="15" fill="rgb(232,36,49)" fg:x="62" fg:w="64"/><text x="0.4375%" y="350.50"></text></g><g><title>&lt;module&gt; (dowhy/causal_refuters/__init__.py:5) (64 samples, 0.19%)</title><rect x="0.1875%" y="356" width="0.1935%" height="15" fill="rgb(209,103,24)" fg:x="62" fg:w="64"/><text x="0.4375%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (64 samples, 0.19%)</title><rect x="0.1875%" y="372" width="0.1935%" height="15" fill="rgb(229,88,8)" fg:x="62" fg:w="64"/><text x="0.4375%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (64 samples, 0.19%)</title><rect x="0.1875%" y="388" width="0.1935%" height="15" fill="rgb(213,181,19)" fg:x="62" fg:w="64"/><text x="0.4375%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (64 samples, 0.19%)</title><rect x="0.1875%" y="404" width="0.1935%" height="15" fill="rgb(254,191,54)" fg:x="62" fg:w="64"/><text x="0.4375%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (64 samples, 0.19%)</title><rect x="0.1875%" y="420" width="0.1935%" height="15" fill="rgb(241,83,37)" fg:x="62" fg:w="64"/><text x="0.4375%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (64 samples, 0.19%)</title><rect x="0.1875%" y="436" width="0.1935%" height="15" fill="rgb(233,36,39)" fg:x="62" fg:w="64"/><text x="0.4375%" y="446.50"></text></g><g><title>fit (sklearn/model_selection/_search.py:875) (36 samples, 0.11%)</title><rect x="0.4173%" y="164" width="0.1089%" height="15" fill="rgb(226,3,54)" fg:x="138" fg:w="36"/><text x="0.6673%" y="174.50"></text></g><g><title>_run_search (sklearn/model_selection/_search.py:1753) (36 samples, 0.11%)</title><rect x="0.4173%" y="180" width="0.1089%" height="15" fill="rgb(245,192,40)" fg:x="138" fg:w="36"/><text x="0.6673%" y="190.50"></text></g><g><title>evaluate_candidates (sklearn/model_selection/_search.py:822) (36 samples, 0.11%)</title><rect x="0.4173%" y="196" width="0.1089%" height="15" fill="rgb(238,167,29)" fg:x="138" fg:w="36"/><text x="0.6673%" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py:1085) (36 samples, 0.11%)</title><rect x="0.4173%" y="212" width="0.1089%" height="15" fill="rgb(232,182,51)" fg:x="138" fg:w="36"/><text x="0.6673%" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:901) (36 samples, 0.11%)</title><rect x="0.4173%" y="228" width="0.1089%" height="15" fill="rgb(231,60,39)" fg:x="138" fg:w="36"/><text x="0.6673%" y="238.50"></text></g><g><title>_dispatch (joblib/parallel.py:819) (36 samples, 0.11%)</title><rect x="0.4173%" y="244" width="0.1089%" height="15" fill="rgb(208,69,12)" fg:x="138" fg:w="36"/><text x="0.6673%" y="254.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:556) (36 samples, 0.11%)</title><rect x="0.4173%" y="260" width="0.1089%" height="15" fill="rgb(235,93,37)" fg:x="138" fg:w="36"/><text x="0.6673%" y="270.50"></text></g><g><title>submit (joblib/externals/loky/reusable_executor.py:176) (36 samples, 0.11%)</title><rect x="0.4173%" y="276" width="0.1089%" height="15" fill="rgb(213,116,39)" fg:x="138" fg:w="36"/><text x="0.6673%" y="286.50"></text></g><g><title>submit (joblib/externals/loky/process_executor.py:1149) (36 samples, 0.11%)</title><rect x="0.4173%" y="292" width="0.1089%" height="15" fill="rgb(222,207,29)" fg:x="138" fg:w="36"/><text x="0.6673%" y="302.50"></text></g><g><title>_ensure_executor_running (joblib/externals/loky/process_executor.py:1123) (36 samples, 0.11%)</title><rect x="0.4173%" y="308" width="0.1089%" height="15" fill="rgb(206,96,30)" fg:x="138" fg:w="36"/><text x="0.6673%" y="318.50"></text></g><g><title>estimate_effect (dowhy/causal_estimator.py:711) (51 samples, 0.15%)</title><rect x="0.3961%" y="116" width="0.1542%" height="15" fill="rgb(218,138,4)" fg:x="131" fg:w="51"/><text x="0.6461%" y="126.50"></text></g><g><title>fit (dowhy/causal_estimators/propensity_score_matching_estimator.py:99) (51 samples, 0.15%)</title><rect x="0.3961%" y="132" width="0.1542%" height="15" fill="rgb(250,191,14)" fg:x="131" fg:w="51"/><text x="0.6461%" y="142.50"></text></g><g><title>fit (dowhy/causal_estimators/propensity_score_estimator.py:133) (47 samples, 0.14%)</title><rect x="0.4082%" y="148" width="0.1421%" height="15" fill="rgb(239,60,40)" fg:x="135" fg:w="47"/><text x="0.6582%" y="158.50"></text></g><g><title>estimate_effect (dowhy/causal_estimators/propensity_score_matching_estimator.py:134) (37 samples, 0.11%)</title><rect x="0.6411%" y="132" width="0.1119%" height="15" fill="rgb(206,27,48)" fg:x="212" fg:w="37"/><text x="0.8911%" y="142.50"></text></g><g><title>fast_xs (pandas/core/internals/managers.py:1097) (35 samples, 0.11%)</title><rect x="0.8104%" y="196" width="0.1058%" height="15" fill="rgb(225,35,8)" fg:x="268" fg:w="35"/><text x="1.0604%" y="206.50"></text></g><g><title>_ixs (pandas/core/frame.py:3716) (67 samples, 0.20%)</title><rect x="0.8074%" y="180" width="0.2026%" height="15" fill="rgb(250,213,24)" fg:x="267" fg:w="67"/><text x="1.0574%" y="190.50"></text></g><g><title>__getitem__ (pandas/core/indexing.py:1073) (92 samples, 0.28%)</title><rect x="0.7862%" y="148" width="0.2782%" height="15" fill="rgb(247,123,22)" fg:x="260" fg:w="92"/><text x="1.0362%" y="158.50"></text></g><g><title>_getitem_axis (pandas/core/indexing.py:1627) (86 samples, 0.26%)</title><rect x="0.8044%" y="164" width="0.2601%" height="15" fill="rgb(231,138,38)" fg:x="266" fg:w="86"/><text x="1.0544%" y="174.50"></text></g><g><title>estimate_effect (dowhy/causal_estimators/propensity_score_matching_estimator.py:147) (114 samples, 0.34%)</title><rect x="0.7620%" y="132" width="0.3447%" height="15" fill="rgb(231,145,46)" fg:x="252" fg:w="114"/><text x="1.0120%" y="142.50"></text></g><g><title>take_nd (pandas/core/array_algos/take.py:117) (39 samples, 0.12%)</title><rect x="1.3849%" y="292" width="0.1179%" height="15" fill="rgb(251,118,11)" fg:x="458" fg:w="39"/><text x="1.6349%" y="302.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:880) (42 samples, 0.13%)</title><rect x="1.3849%" y="276" width="0.1270%" height="15" fill="rgb(217,147,25)" fg:x="458" fg:w="42"/><text x="1.6349%" y="286.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:751) (58 samples, 0.18%)</title><rect x="1.3759%" y="244" width="0.1754%" height="15" fill="rgb(247,81,37)" fg:x="455" fg:w="58"/><text x="1.6259%" y="254.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:752) (58 samples, 0.18%)</title><rect x="1.3759%" y="260" width="0.1754%" height="15" fill="rgb(209,12,38)" fg:x="455" fg:w="58"/><text x="1.6259%" y="270.50"></text></g><g><title>_take (pandas/core/generic.py:3886) (102 samples, 0.31%)</title><rect x="1.2610%" y="212" width="0.3084%" height="15" fill="rgb(227,1,9)" fg:x="417" fg:w="102"/><text x="1.5110%" y="222.50"></text></g><g><title>take (pandas/core/internals/managers.py:978) (69 samples, 0.21%)</title><rect x="1.3607%" y="228" width="0.2086%" height="15" fill="rgb(248,47,43)" fg:x="450" fg:w="69"/><text x="1.6107%" y="238.50"></text></g><g><title>_take_with_is_copy (pandas/core/generic.py:3902) (114 samples, 0.34%)</title><rect x="1.2458%" y="196" width="0.3447%" height="15" fill="rgb(221,10,30)" fg:x="412" fg:w="114"/><text x="1.4958%" y="206.50"></text></g><g><title>__getitem__ (pandas/core/indexing.py:1073) (132 samples, 0.40%)</title><rect x="1.2277%" y="148" width="0.3992%" height="15" fill="rgb(210,229,1)" fg:x="406" fg:w="132"/><text x="1.4777%" y="158.50"></text></g><g><title>_getitem_axis (pandas/core/indexing.py:1616) (127 samples, 0.38%)</title><rect x="1.2428%" y="164" width="0.3840%" height="15" fill="rgb(222,148,37)" fg:x="411" fg:w="127"/><text x="1.4928%" y="174.50"></text></g><g><title>_get_list_axis (pandas/core/indexing.py:1587) (127 samples, 0.38%)</title><rect x="1.2428%" y="180" width="0.3840%" height="15" fill="rgb(234,67,33)" fg:x="411" fg:w="127"/><text x="1.4928%" y="190.50"></text></g><g><title>estimate_effect (dowhy/causal_estimators/propensity_score_matching_estimator.py:148) (180 samples, 0.54%)</title><rect x="1.1067%" y="132" width="0.5443%" height="15" fill="rgb(247,98,35)" fg:x="366" fg:w="180"/><text x="1.3567%" y="142.50"></text></g><g><title>run_experiment (sensitivity_albumin_for_sepsis.py:191) (418 samples, 1.26%)</title><rect x="0.3961%" y="84" width="1.2640%" height="15" fill="rgb(247,138,52)" fg:x="131" fg:w="418"/><text x="0.6461%" y="94.50"></text></g><g><title>estimate_effect (dowhy/causal_model.py:318) (418 samples, 1.26%)</title><rect x="0.3961%" y="100" width="1.2640%" height="15" fill="rgb(213,79,30)" fg:x="131" fg:w="418"/><text x="0.6461%" y="110.50"></text></g><g><title>estimate_effect (dowhy/causal_estimator.py:719) (367 samples, 1.11%)</title><rect x="0.5503%" y="116" width="1.1098%" height="15" fill="rgb(246,177,23)" fg:x="182" fg:w="367"/><text x="0.8003%" y="126.50"></text></g><g><title>_generate_bootstrap_estimates (dowhy/causal_estimator.py:291) (42 samples, 0.13%)</title><rect x="1.7176%" y="148" width="0.1270%" height="15" fill="rgb(230,62,27)" fg:x="568" fg:w="42"/><text x="1.9676%" y="158.50"></text></g><g><title>get_new_estimator_object (dowhy/causal_estimator.py:174) (42 samples, 0.13%)</title><rect x="1.7176%" y="164" width="0.1270%" height="15" fill="rgb(216,154,8)" fg:x="568" fg:w="42"/><text x="1.9676%" y="174.50"></text></g><g><title>deepcopy (copy.py:172) (41 samples, 0.12%)</title><rect x="1.7206%" y="180" width="0.1240%" height="15" fill="rgb(244,35,45)" fg:x="569" fg:w="41"/><text x="1.9706%" y="190.50"></text></g><g><title>_reconstruct (copy.py:271) (40 samples, 0.12%)</title><rect x="1.7236%" y="196" width="0.1210%" height="15" fill="rgb(251,115,12)" fg:x="570" fg:w="40"/><text x="1.9736%" y="206.50"></text></g><g><title>deepcopy (copy.py:146) (40 samples, 0.12%)</title><rect x="1.7236%" y="212" width="0.1210%" height="15" fill="rgb(240,54,50)" fg:x="570" fg:w="40"/><text x="1.9736%" y="222.50"></text></g><g><title>_deepcopy_dict (copy.py:231) (39 samples, 0.12%)</title><rect x="1.7266%" y="228" width="0.1179%" height="15" fill="rgb(233,84,52)" fg:x="571" fg:w="39"/><text x="1.9766%" y="238.50"></text></g><g><title>_generate_bootstrap_estimates (dowhy/causal_estimator.py:298) (72 samples, 0.22%)</title><rect x="1.8446%" y="148" width="0.2177%" height="15" fill="rgb(207,117,47)" fg:x="610" fg:w="72"/><text x="2.0946%" y="158.50"></text></g><g><title>fit (dowhy/causal_estimators/propensity_score_matching_estimator.py:99) (72 samples, 0.22%)</title><rect x="1.8446%" y="164" width="0.2177%" height="15" fill="rgb(249,43,39)" fg:x="610" fg:w="72"/><text x="2.0946%" y="174.50"></text></g><g><title>estimate_effect (dowhy/causal_estimators/propensity_score_matching_estimator.py:126) (37 samples, 0.11%)</title><rect x="2.2105%" y="164" width="0.1119%" height="15" fill="rgb(209,38,44)" fg:x="731" fg:w="37"/><text x="2.4605%" y="174.50"></text></g><g><title>_getitem_axis (pandas/core/indexing.py:1610) (48 samples, 0.15%)</title><rect x="2.7003%" y="196" width="0.1451%" height="15" fill="rgb(236,212,23)" fg:x="893" fg:w="48"/><text x="2.9503%" y="206.50"></text></g><g><title>_getitem_axis (pandas/core/indexing.py:1625) (46 samples, 0.14%)</title><rect x="2.8908%" y="196" width="0.1391%" height="15" fill="rgb(242,79,21)" fg:x="956" fg:w="46"/><text x="3.1408%" y="206.50"></text></g><g><title>find_common_type (pandas/core/dtypes/cast.py:1628) (37 samples, 0.11%)</title><rect x="3.4533%" y="260" width="0.1119%" height="15" fill="rgb(211,96,35)" fg:x="1142" fg:w="37"/><text x="3.7033%" y="270.50"></text></g><g><title>find_common_type (pandas/core/dtypes/cast.py:1635) (77 samples, 0.23%)</title><rect x="3.6075%" y="260" width="0.2328%" height="15" fill="rgb(253,215,40)" fg:x="1193" fg:w="77"/><text x="3.8575%" y="270.50"></text></g><g><title>&lt;genexpr&gt; (pandas/core/dtypes/cast.py:1635) (68 samples, 0.21%)</title><rect x="3.6347%" y="276" width="0.2056%" height="15" fill="rgb(211,81,21)" fg:x="1202" fg:w="68"/><text x="3.8847%" y="286.50"></text></g><g><title>_can_coerce_all (numpy/core/numerictypes.py:581) (50 samples, 0.15%)</title><rect x="3.9976%" y="292" width="0.1512%" height="15" fill="rgb(208,190,38)" fg:x="1322" fg:w="50"/><text x="4.2476%" y="302.50"></text></g><g><title>_can_coerce_all (numpy/core/numerictypes.py:582) (122 samples, 0.37%)</title><rect x="4.1488%" y="292" width="0.3689%" height="15" fill="rgb(235,213,38)" fg:x="1372" fg:w="122"/><text x="4.3988%" y="302.50"></text></g><g><title>&lt;listcomp&gt; (numpy/core/numerictypes.py:582) (62 samples, 0.19%)</title><rect x="4.3302%" y="308" width="0.1875%" height="15" fill="rgb(237,122,38)" fg:x="1432" fg:w="62"/><text x="4.5802%" y="318.50"></text></g><g><title>find_common_type (numpy/core/numerictypes.py:652) (197 samples, 0.60%)</title><rect x="3.9613%" y="276" width="0.5957%" height="15" fill="rgb(244,218,35)" fg:x="1310" fg:w="197"/><text x="4.2113%" y="286.50"></text></g><g><title>fast_xs (pandas/core/internals/managers.py:1097) (490 samples, 1.48%)</title><rect x="3.1025%" y="228" width="1.4817%" height="15" fill="rgb(240,68,47)" fg:x="1026" fg:w="490"/><text x="3.3525%" y="238.50"></text></g><g><title>interleaved_dtype (pandas/core/internals/base.py:226) (456 samples, 1.38%)</title><rect x="3.2053%" y="244" width="1.3789%" height="15" fill="rgb(210,16,53)" fg:x="1060" fg:w="456"/><text x="3.4553%" y="254.50"></text></g><g><title>find_common_type (pandas/core/dtypes/cast.py:1641) (242 samples, 0.73%)</title><rect x="3.8524%" y="260" width="0.7318%" height="15" fill="rgb(235,124,12)" fg:x="1274" fg:w="242"/><text x="4.1024%" y="270.50"></text></g><g><title>fast_xs (pandas/core/internals/managers.py:1119) (92 samples, 0.28%)</title><rect x="4.7475%" y="228" width="0.2782%" height="15" fill="rgb(224,169,11)" fg:x="1570" fg:w="92"/><text x="4.9975%" y="238.50"></text></g><g><title>fast_xs (pandas/core/internals/managers.py:1120) (183 samples, 0.55%)</title><rect x="5.0257%" y="228" width="0.5534%" height="15" fill="rgb(250,166,2)" fg:x="1662" fg:w="183"/><text x="5.2757%" y="238.50"></text></g><g><title>iget (pandas/core/internals/blocks.py:834) (77 samples, 0.23%)</title><rect x="5.3462%" y="244" width="0.2328%" height="15" fill="rgb(242,216,29)" fg:x="1768" fg:w="77"/><text x="5.5962%" y="254.50"></text></g><g><title>fast_xs (pandas/core/internals/managers.py:1126) (98 samples, 0.30%)</title><rect x="5.5791%" y="228" width="0.2963%" height="15" fill="rgb(230,116,27)" fg:x="1845" fg:w="98"/><text x="5.8291%" y="238.50"></text></g><g><title>_ixs (pandas/core/frame.py:3716) (961 samples, 2.91%)</title><rect x="3.0692%" y="212" width="2.9060%" height="15" fill="rgb(228,99,48)" fg:x="1015" fg:w="961"/><text x="3.3192%" y="222.50">_i..</text></g><g><title>_ixs (pandas/core/frame.py:3719) (46 samples, 0.14%)</title><rect x="5.9752%" y="212" width="0.1391%" height="15" fill="rgb(253,11,6)" fg:x="1976" fg:w="46"/><text x="6.2252%" y="222.50"></text></g><g><title>array (pandas/core/internals/base.py:170) (37 samples, 0.11%)</title><rect x="6.0024%" y="228" width="0.1119%" height="15" fill="rgb(247,143,39)" fg:x="1985" fg:w="37"/><text x="6.2524%" y="238.50"></text></g><g><title>__init__ (pandas/core/series.py:359) (41 samples, 0.12%)</title><rect x="6.4500%" y="228" width="0.1240%" height="15" fill="rgb(236,97,10)" fg:x="2133" fg:w="41"/><text x="6.7000%" y="238.50"></text></g><g><title>__setattr__ (pandas/core/generic.py:5914) (47 samples, 0.14%)</title><rect x="6.5860%" y="244" width="0.1421%" height="15" fill="rgb(233,208,19)" fg:x="2178" fg:w="47"/><text x="6.8360%" y="254.50"></text></g><g><title>name (pandas/core/series.py:659) (44 samples, 0.13%)</title><rect x="6.5951%" y="260" width="0.1331%" height="15" fill="rgb(216,164,2)" fg:x="2181" fg:w="44"/><text x="6.8451%" y="270.50"></text></g><g><title>name (pandas/core/series.py:663) (46 samples, 0.14%)</title><rect x="6.7947%" y="260" width="0.1391%" height="15" fill="rgb(220,129,5)" fg:x="2247" fg:w="46"/><text x="7.0447%" y="270.50"></text></g><g><title>_ixs (pandas/core/frame.py:3720) (273 samples, 0.83%)</title><rect x="6.1143%" y="212" width="0.8255%" height="15" fill="rgb(242,17,10)" fg:x="2022" fg:w="273"/><text x="6.3643%" y="222.50"></text></g><g><title>__init__ (pandas/core/series.py:364) (121 samples, 0.37%)</title><rect x="6.5739%" y="228" width="0.3659%" height="15" fill="rgb(242,107,0)" fg:x="2174" fg:w="121"/><text x="6.8239%" y="238.50"></text></g><g><title>__setattr__ (pandas/core/generic.py:5924) (56 samples, 0.17%)</title><rect x="6.7705%" y="244" width="0.1693%" height="15" fill="rgb(251,28,31)" fg:x="2239" fg:w="56"/><text x="7.0205%" y="254.50"></text></g><g><title>__getitem__ (pandas/core/indexing.py:1073) (1,454 samples, 4.40%)</title><rect x="2.6187%" y="180" width="4.3967%" height="15" fill="rgb(233,223,10)" fg:x="866" fg:w="1454"/><text x="2.8687%" y="190.50">__get..</text></g><g><title>_getitem_axis (pandas/core/indexing.py:1627) (1,318 samples, 3.99%)</title><rect x="3.0299%" y="196" width="3.9855%" height="15" fill="rgb(215,21,27)" fg:x="1002" fg:w="1318"/><text x="3.2799%" y="206.50">_get..</text></g><g><title>_get_value (pandas/core/series.py:1089) (38 samples, 0.11%)</title><rect x="7.1092%" y="196" width="0.1149%" height="15" fill="rgb(232,23,21)" fg:x="2351" fg:w="38"/><text x="7.3592%" y="206.50"></text></g><g><title>__getitem__ (pandas/core/series.py:981) (91 samples, 0.28%)</title><rect x="7.0880%" y="180" width="0.2752%" height="15" fill="rgb(244,5,23)" fg:x="2344" fg:w="91"/><text x="7.3380%" y="190.50"></text></g><g><title>_get_value (pandas/core/series.py:1090) (46 samples, 0.14%)</title><rect x="7.2241%" y="196" width="0.1391%" height="15" fill="rgb(226,81,46)" fg:x="2389" fg:w="46"/><text x="7.4741%" y="206.50"></text></g><g><title>estimate_effect (dowhy/causal_estimators/propensity_score_matching_estimator.py:133) (1,670 samples, 5.05%)</title><rect x="2.3314%" y="164" width="5.0499%" height="15" fill="rgb(247,70,30)" fg:x="771" fg:w="1670"/><text x="2.5814%" y="174.50">estima..</text></g><g><title>__getitem__ (pandas/core/frame.py:3771) (35 samples, 0.11%)</title><rect x="7.8258%" y="180" width="0.1058%" height="15" fill="rgb(212,68,19)" fg:x="2588" fg:w="35"/><text x="8.0758%" y="190.50"></text></g><g><title>_ixs (pandas/core/frame.py:3728) (35 samples, 0.11%)</title><rect x="8.0738%" y="212" width="0.1058%" height="15" fill="rgb(240,187,13)" fg:x="2670" fg:w="35"/><text x="8.3238%" y="222.50"></text></g><g><title>_ixs (pandas/core/frame.py:3730) (94 samples, 0.28%)</title><rect x="8.1796%" y="212" width="0.2842%" height="15" fill="rgb(223,113,26)" fg:x="2705" fg:w="94"/><text x="8.4296%" y="222.50"></text></g><g><title>__init__ (pandas/core/series.py:359) (47 samples, 0.14%)</title><rect x="8.7058%" y="244" width="0.1421%" height="15" fill="rgb(206,192,2)" fg:x="2879" fg:w="47"/><text x="8.9558%" y="254.50"></text></g><g><title>_ixs (pandas/core/frame.py:3731) (132 samples, 0.40%)</title><rect x="8.4639%" y="212" width="0.3992%" height="15" fill="rgb(241,108,4)" fg:x="2799" fg:w="132"/><text x="8.7139%" y="222.50"></text></g><g><title>_box_col_values (pandas/core/frame.py:4266) (111 samples, 0.34%)</title><rect x="8.5274%" y="228" width="0.3357%" height="15" fill="rgb(247,173,49)" fg:x="2820" fg:w="111"/><text x="8.7774%" y="238.50"></text></g><g><title>_get_item_cache (pandas/core/frame.py:4283) (327 samples, 0.99%)</title><rect x="8.0677%" y="196" width="0.9888%" height="15" fill="rgb(224,114,35)" fg:x="2668" fg:w="327"/><text x="8.3177%" y="206.50"></text></g><g><title>_ixs (pandas/core/frame.py:3734) (64 samples, 0.19%)</title><rect x="8.8630%" y="212" width="0.1935%" height="15" fill="rgb(245,159,27)" fg:x="2931" fg:w="64"/><text x="9.1130%" y="222.50"></text></g><g><title>_set_as_cached (pandas/core/series.py:1272) (54 samples, 0.16%)</title><rect x="8.8933%" y="228" width="0.1633%" height="15" fill="rgb(245,172,44)" fg:x="2941" fg:w="54"/><text x="9.1433%" y="238.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:3774) (381 samples, 1.15%)</title><rect x="7.9317%" y="180" width="1.1521%" height="15" fill="rgb(236,23,11)" fg:x="2623" fg:w="381"/><text x="8.1817%" y="190.50"></text></g><g><title>_getitem_axis (pandas/core/indexing.py:1610) (43 samples, 0.13%)</title><rect x="9.1805%" y="196" width="0.1300%" height="15" fill="rgb(205,117,38)" fg:x="3036" fg:w="43"/><text x="9.4305%" y="206.50"></text></g><g><title>_take (pandas/core/generic.py:3884) (69 samples, 0.21%)</title><rect x="9.3922%" y="244" width="0.2086%" height="15" fill="rgb(237,72,25)" fg:x="3106" fg:w="69"/><text x="9.6422%" y="254.50"></text></g><g><title>_consolidate_inplace (pandas/core/generic.py:5980) (60 samples, 0.18%)</title><rect x="9.4194%" y="260" width="0.1814%" height="15" fill="rgb(244,70,9)" fg:x="3115" fg:w="60"/><text x="9.6694%" y="270.50"></text></g><g><title>take (pandas/core/internals/managers.py:973) (49 samples, 0.15%)</title><rect x="9.6583%" y="260" width="0.1482%" height="15" fill="rgb(217,125,39)" fg:x="3194" fg:w="49"/><text x="9.9083%" y="270.50"></text></g><g><title>shape (pandas/core/internals/base.py:56) (43 samples, 0.13%)</title><rect x="9.6764%" y="276" width="0.1300%" height="15" fill="rgb(235,36,10)" fg:x="3200" fg:w="43"/><text x="9.9264%" y="286.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexers/utils.py:278) (48 samples, 0.15%)</title><rect x="9.8276%" y="276" width="0.1451%" height="15" fill="rgb(251,123,47)" fg:x="3250" fg:w="48"/><text x="10.0776%" y="286.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexers/utils.py:279) (65 samples, 0.20%)</title><rect x="9.9728%" y="276" width="0.1966%" height="15" fill="rgb(221,13,13)" fg:x="3298" fg:w="65"/><text x="10.2228%" y="286.50"></text></g><g><title>_any (numpy/core/_methods.py:57) (54 samples, 0.16%)</title><rect x="10.0060%" y="292" width="0.1633%" height="15" fill="rgb(238,131,9)" fg:x="3309" fg:w="54"/><text x="10.2560%" y="302.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexers/utils.py:284) (65 samples, 0.20%)</title><rect x="10.1693%" y="276" width="0.1966%" height="15" fill="rgb(211,50,8)" fg:x="3363" fg:w="65"/><text x="10.4193%" y="286.50"></text></g><g><title>take (pandas/core/internals/managers.py:975) (211 samples, 0.64%)</title><rect x="9.8065%" y="260" width="0.6380%" height="15" fill="rgb(245,182,24)" fg:x="3243" fg:w="211"/><text x="10.0565%" y="270.50"></text></g><g><title>take (pandas/core/indexes/base.py:1183) (59 samples, 0.18%)</title><rect x="10.5383%" y="276" width="0.1784%" height="15" fill="rgb(242,14,37)" fg:x="3485" fg:w="59"/><text x="10.7883%" y="286.50"></text></g><g><title>take (pandas/core/internals/managers.py:977) (150 samples, 0.45%)</title><rect x="10.4445%" y="260" width="0.4536%" height="15" fill="rgb(246,228,12)" fg:x="3454" fg:w="150"/><text x="10.6945%" y="270.50"></text></g><g><title>take (pandas/core/indexes/base.py:1192) (56 samples, 0.17%)</title><rect x="10.7288%" y="276" width="0.1693%" height="15" fill="rgb(213,55,15)" fg:x="3548" fg:w="56"/><text x="10.9788%" y="286.50"></text></g><g><title>_take_preprocess_indexer_and_fill_value (pandas/core/array_algos/take.py:569) (52 samples, 0.16%)</title><rect x="11.2791%" y="356" width="0.1572%" height="15" fill="rgb(209,9,3)" fg:x="3730" fg:w="52"/><text x="11.5291%" y="366.50"></text></g><g><title>_take_preprocess_indexer_and_fill_value (pandas/core/array_algos/take.py:575) (72 samples, 0.22%)</title><rect x="11.4787%" y="356" width="0.2177%" height="15" fill="rgb(230,59,30)" fg:x="3796" fg:w="72"/><text x="11.7287%" y="366.50"></text></g><g><title>_take_preprocess_indexer_and_fill_value (pandas/core/array_algos/take.py:576) (62 samples, 0.19%)</title><rect x="11.6964%" y="356" width="0.1875%" height="15" fill="rgb(209,121,21)" fg:x="3868" fg:w="62"/><text x="11.9464%" y="366.50"></text></g><g><title>_any (numpy/core/_methods.py:57) (47 samples, 0.14%)</title><rect x="11.7418%" y="372" width="0.1421%" height="15" fill="rgb(220,109,13)" fg:x="3883" fg:w="47"/><text x="11.9918%" y="382.50"></text></g><g><title>_take_nd_ndarray (pandas/core/array_algos/take.py:134) (236 samples, 0.71%)</title><rect x="11.2337%" y="340" width="0.7136%" height="15" fill="rgb(232,18,1)" fg:x="3715" fg:w="236"/><text x="11.4837%" y="350.50"></text></g><g><title>_take_nd_ndarray (pandas/core/array_algos/take.py:160) (42 samples, 0.13%)</title><rect x="12.1439%" y="340" width="0.1270%" height="15" fill="rgb(215,41,42)" fg:x="4016" fg:w="42"/><text x="12.3939%" y="350.50"></text></g><g><title>_take_nd_ndarray (pandas/core/array_algos/take.py:163) (95 samples, 0.29%)</title><rect x="12.2921%" y="340" width="0.2873%" height="15" fill="rgb(224,123,36)" fg:x="4065" fg:w="95"/><text x="12.5421%" y="350.50"></text></g><g><title>take_nd (pandas/core/array_algos/take.py:117) (471 samples, 1.42%)</title><rect x="11.1642%" y="324" width="1.4243%" height="15" fill="rgb(240,125,3)" fg:x="3692" fg:w="471"/><text x="11.4142%" y="334.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:880) (517 samples, 1.56%)</title><rect x="11.1037%" y="308" width="1.5634%" height="15" fill="rgb(205,98,50)" fg:x="3672" fg:w="517"/><text x="11.3537%" y="318.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:890) (83 samples, 0.25%)</title><rect x="12.6973%" y="308" width="0.2510%" height="15" fill="rgb(205,185,37)" fg:x="4199" fg:w="83"/><text x="12.9473%" y="318.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:752) (689 samples, 2.08%)</title><rect x="11.0281%" y="292" width="2.0835%" height="15" fill="rgb(238,207,15)" fg:x="3647" fg:w="689"/><text x="11.2781%" y="302.50">&lt;..</text></g><g><title>take_nd (pandas/core/internals/blocks.py:893) (54 samples, 0.16%)</title><rect x="12.9483%" y="308" width="0.1633%" height="15" fill="rgb(213,199,42)" fg:x="4282" fg:w="54"/><text x="13.1983%" y="318.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:751) (712 samples, 2.15%)</title><rect x="10.9797%" y="276" width="2.1530%" height="15" fill="rgb(235,201,11)" fg:x="3631" fg:w="712"/><text x="11.2297%" y="286.50">r..</text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:767) (40 samples, 0.12%)</title><rect x="13.1418%" y="276" width="0.1210%" height="15" fill="rgb(207,46,11)" fg:x="4346" fg:w="40"/><text x="13.3918%" y="286.50"></text></g><g><title>take (pandas/core/internals/managers.py:978) (819 samples, 2.48%)</title><rect x="10.8981%" y="260" width="2.4766%" height="15" fill="rgb(241,35,35)" fg:x="3604" fg:w="819"/><text x="11.1481%" y="270.50">ta..</text></g><g><title>_take (pandas/core/generic.py:3886) (1,250 samples, 3.78%)</title><rect x="9.6008%" y="244" width="3.7799%" height="15" fill="rgb(243,32,47)" fg:x="3175" fg:w="1250"/><text x="9.8508%" y="254.50">_tak..</text></g><g><title>__finalize__ (pandas/core/generic.py:5868) (35 samples, 0.11%)</title><rect x="13.5077%" y="260" width="0.1058%" height="15" fill="rgb(247,202,23)" fg:x="4467" fg:w="35"/><text x="13.7577%" y="270.50"></text></g><g><title>__init__ (pandas/core/frame.py:631) (54 samples, 0.16%)</title><rect x="13.6861%" y="260" width="0.1633%" height="15" fill="rgb(219,102,11)" fg:x="4526" fg:w="54"/><text x="13.9361%" y="270.50"></text></g><g><title>_take_with_is_copy (pandas/core/generic.py:3902) (1,483 samples, 4.48%)</title><rect x="9.3680%" y="228" width="4.4844%" height="15" fill="rgb(243,110,44)" fg:x="3098" fg:w="1483"/><text x="9.6180%" y="238.50">_take..</text></g><g><title>_take (pandas/core/generic.py:3892) (146 samples, 0.44%)</title><rect x="13.4109%" y="244" width="0.4415%" height="15" fill="rgb(222,74,54)" fg:x="4435" fg:w="146"/><text x="13.6609%" y="254.50"></text></g><g><title>equals (pandas/core/indexes/base.py:5529) (44 samples, 0.13%)</title><rect x="14.0399%" y="244" width="0.1331%" height="15" fill="rgb(216,99,12)" fg:x="4643" fg:w="44"/><text x="14.2899%" y="254.50"></text></g><g><title>_take_with_is_copy (pandas/core/generic.py:3904) (160 samples, 0.48%)</title><rect x="13.8524%" y="228" width="0.4838%" height="15" fill="rgb(226,22,26)" fg:x="4581" fg:w="160"/><text x="14.1024%" y="238.50"></text></g><g><title>__getitem__ (pandas/core/indexing.py:1073) (1,753 samples, 5.30%)</title><rect x="9.1231%" y="180" width="5.3009%" height="15" fill="rgb(217,163,10)" fg:x="3017" fg:w="1753"/><text x="9.3731%" y="190.50">__geti..</text></g><g><title>_getitem_axis (pandas/core/indexing.py:1616) (1,679 samples, 5.08%)</title><rect x="9.3468%" y="196" width="5.0771%" height="15" fill="rgb(213,25,53)" fg:x="3091" fg:w="1679"/><text x="9.5968%" y="206.50">_getit..</text></g><g><title>_get_list_axis (pandas/core/indexing.py:1587) (1,674 samples, 5.06%)</title><rect x="9.3620%" y="212" width="5.0620%" height="15" fill="rgb(252,105,26)" fg:x="3096" fg:w="1674"/><text x="9.6120%" y="222.50">_get_l..</text></g><g><title>__iter__ (pandas/core/base.py:755) (49 samples, 0.15%)</title><rect x="14.5812%" y="196" width="0.1482%" height="15" fill="rgb(220,39,43)" fg:x="4822" fg:w="49"/><text x="14.8312%" y="206.50"></text></g><g><title>_values (pandas/core/series.py:740) (34 samples, 0.10%)</title><rect x="14.6265%" y="212" width="0.1028%" height="15" fill="rgb(229,68,48)" fg:x="4837" fg:w="34"/><text x="14.8765%" y="222.50"></text></g><g><title>estimate_effect (dowhy/causal_estimators/propensity_score_matching_estimator.py:134) (2,458 samples, 7.43%)</title><rect x="7.3813%" y="164" width="7.4327%" height="15" fill="rgb(252,8,32)" fg:x="2441" fg:w="2458"/><text x="7.6313%" y="174.50">estimate_e..</text></g><g><title>item (pandas/core/base.py:346) (92 samples, 0.28%)</title><rect x="14.5358%" y="180" width="0.2782%" height="15" fill="rgb(223,20,43)" fg:x="4807" fg:w="92"/><text x="14.7858%" y="190.50"></text></g><g><title>__call__ (joblib/parallel.py:1085) (111 samples, 0.34%)</title><rect x="14.8896%" y="196" width="0.3357%" height="15" fill="rgb(229,81,49)" fg:x="4924" fg:w="111"/><text x="15.1396%" y="206.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:901) (108 samples, 0.33%)</title><rect x="14.8987%" y="212" width="0.3266%" height="15" fill="rgb(236,28,36)" fg:x="4927" fg:w="108"/><text x="15.1487%" y="222.50"></text></g><g><title>_dispatch (joblib/parallel.py:819) (108 samples, 0.33%)</title><rect x="14.8987%" y="228" width="0.3266%" height="15" fill="rgb(249,185,26)" fg:x="4927" fg:w="108"/><text x="15.1487%" y="238.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:208) (108 samples, 0.33%)</title><rect x="14.8987%" y="244" width="0.3266%" height="15" fill="rgb(249,174,33)" fg:x="4927" fg:w="108"/><text x="15.1487%" y="254.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:597) (108 samples, 0.33%)</title><rect x="14.8987%" y="260" width="0.3266%" height="15" fill="rgb(233,201,37)" fg:x="4927" fg:w="108"/><text x="15.1487%" y="270.50"></text></g><g><title>__call__ (joblib/parallel.py:288) (108 samples, 0.33%)</title><rect x="14.8987%" y="276" width="0.3266%" height="15" fill="rgb(221,78,26)" fg:x="4927" fg:w="108"/><text x="15.1487%" y="286.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:288) (108 samples, 0.33%)</title><rect x="14.8987%" y="292" width="0.3266%" height="15" fill="rgb(250,127,30)" fg:x="4927" fg:w="108"/><text x="15.1487%" y="302.50"></text></g><g><title>__call__ (sklearn/utils/fixes.py:117) (108 samples, 0.33%)</title><rect x="14.8987%" y="308" width="0.3266%" height="15" fill="rgb(230,49,44)" fg:x="4927" fg:w="108"/><text x="15.1487%" y="318.50"></text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py:623) (108 samples, 0.33%)</title><rect x="14.8987%" y="324" width="0.3266%" height="15" fill="rgb(229,67,23)" fg:x="4927" fg:w="108"/><text x="15.1487%" y="334.50"></text></g><g><title>estimate_effect (dowhy/causal_estimators/propensity_score_matching_estimator.py:143) (120 samples, 0.36%)</title><rect x="14.8775%" y="164" width="0.3629%" height="15" fill="rgb(249,83,47)" fg:x="4920" fg:w="120"/><text x="15.1275%" y="174.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:814) (116 samples, 0.35%)</title><rect x="14.8896%" y="180" width="0.3508%" height="15" fill="rgb(215,43,3)" fg:x="4924" fg:w="116"/><text x="15.1396%" y="190.50"></text></g><g><title>__getitem__ (pandas/core/indexing.py:1061) (63 samples, 0.19%)</title><rect x="16.6072%" y="180" width="0.1905%" height="15" fill="rgb(238,154,13)" fg:x="5492" fg:w="63"/><text x="16.8572%" y="190.50"></text></g><g><title>__getitem__ (pandas/core/indexing.py:1072) (59 samples, 0.18%)</title><rect x="16.8945%" y="180" width="0.1784%" height="15" fill="rgb(219,56,2)" fg:x="5587" fg:w="59"/><text x="17.1445%" y="190.50"></text></g><g><title>_getitem_axis (pandas/core/indexing.py:1595) (87 samples, 0.26%)</title><rect x="17.2271%" y="196" width="0.2631%" height="15" fill="rgb(233,0,4)" fg:x="5697" fg:w="87"/><text x="17.4771%" y="206.50"></text></g><g><title>_instancecheck (pandas/core/dtypes/generic.py:47) (51 samples, 0.15%)</title><rect x="17.3360%" y="212" width="0.1542%" height="15" fill="rgb(235,30,7)" fg:x="5733" fg:w="51"/><text x="17.5860%" y="222.50"></text></g><g><title>is_bool_indexer (pandas/core/common.py:124) (137 samples, 0.41%)</title><rect x="17.6625%" y="212" width="0.4143%" height="15" fill="rgb(250,79,13)" fg:x="5841" fg:w="137"/><text x="17.9125%" y="222.50"></text></g><g><title>_instancecheck (pandas/core/dtypes/generic.py:47) (46 samples, 0.14%)</title><rect x="17.9377%" y="228" width="0.1391%" height="15" fill="rgb(211,146,34)" fg:x="5932" fg:w="46"/><text x="18.1877%" y="238.50"></text></g><g><title>is_bool_indexer (pandas/core/common.py:125) (137 samples, 0.41%)</title><rect x="18.0768%" y="212" width="0.4143%" height="15" fill="rgb(228,22,38)" fg:x="5978" fg:w="137"/><text x="18.3268%" y="222.50"></text></g><g><title>is_array_like (pandas/core/dtypes/inference.py:217) (121 samples, 0.37%)</title><rect x="18.1252%" y="228" width="0.3659%" height="15" fill="rgb(235,168,5)" fg:x="5994" fg:w="121"/><text x="18.3752%" y="238.50"></text></g><g><title>_getitem_axis (pandas/core/indexing.py:1610) (311 samples, 0.94%)</title><rect x="17.5900%" y="196" width="0.9404%" height="15" fill="rgb(221,155,16)" fg:x="5817" fg:w="311"/><text x="17.8400%" y="206.50"></text></g><g><title>_getitem_axis (pandas/core/indexing.py:1615) (99 samples, 0.30%)</title><rect x="18.5304%" y="196" width="0.2994%" height="15" fill="rgb(215,215,53)" fg:x="6128" fg:w="99"/><text x="18.7804%" y="206.50"></text></g><g><title>is_list_like_indexer (pandas/core/indexers/utils.py:79) (81 samples, 0.24%)</title><rect x="18.5848%" y="212" width="0.2449%" height="15" fill="rgb(223,4,10)" fg:x="6146" fg:w="81"/><text x="18.8348%" y="222.50"></text></g><g><title>_get_axis (pandas/core/generic.py:566) (73 samples, 0.22%)</title><rect x="19.2894%" y="228" width="0.2207%" height="15" fill="rgb(234,103,6)" fg:x="6379" fg:w="73"/><text x="19.5394%" y="238.50"></text></g><g><title>_get_axis_number (pandas/core/generic.py:554) (41 samples, 0.12%)</title><rect x="19.3862%" y="244" width="0.1240%" height="15" fill="rgb(227,97,0)" fg:x="6411" fg:w="41"/><text x="19.6362%" y="254.50"></text></g><g><title>_validate_integer (pandas/core/indexing.py:1555) (206 samples, 0.62%)</title><rect x="18.9809%" y="212" width="0.6229%" height="15" fill="rgb(234,150,53)" fg:x="6277" fg:w="206"/><text x="19.2309%" y="222.50"></text></g><g><title>_getitem_axis (pandas/core/indexing.py:1625) (280 samples, 0.85%)</title><rect x="18.8872%" y="196" width="0.8467%" height="15" fill="rgb(228,201,54)" fg:x="6246" fg:w="280"/><text x="19.1372%" y="206.50"></text></g><g><title>_validate_integer (pandas/core/indexing.py:1556) (43 samples, 0.13%)</title><rect x="19.6039%" y="212" width="0.1300%" height="15" fill="rgb(222,22,37)" fg:x="6483" fg:w="43"/><text x="19.8539%" y="222.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:1097) (70 samples, 0.21%)</title><rect x="20.3689%" y="244" width="0.2117%" height="15" fill="rgb(237,53,32)" fg:x="6736" fg:w="70"/><text x="20.6189%" y="254.50"></text></g><g><title>find_common_type (pandas/core/dtypes/cast.py:1613) (112 samples, 0.34%)</title><rect x="20.7953%" y="260" width="0.3387%" height="15" fill="rgb(233,25,53)" fg:x="6877" fg:w="112"/><text x="21.0453%" y="270.50"></text></g><g><title>find_common_type (pandas/core/dtypes/cast.py:1617) (171 samples, 0.52%)</title><rect x="21.1340%" y="260" width="0.5171%" height="15" fill="rgb(210,40,34)" fg:x="6989" fg:w="171"/><text x="21.3840%" y="270.50"></text></g><g><title>find_common_type (pandas/core/dtypes/cast.py:1619) (181 samples, 0.55%)</title><rect x="21.6510%" y="260" width="0.5473%" height="15" fill="rgb(241,220,44)" fg:x="7160" fg:w="181"/><text x="21.9010%" y="270.50"></text></g><g><title>&lt;genexpr&gt; (pandas/core/dtypes/cast.py:1619) (90 samples, 0.27%)</title><rect x="21.9262%" y="276" width="0.2721%" height="15" fill="rgb(235,28,35)" fg:x="7251" fg:w="90"/><text x="22.1762%" y="286.50"></text></g><g><title>is_datetime64_dtype (pandas/core/dtypes/common.py:346) (36 samples, 0.11%)</title><rect x="22.7427%" y="292" width="0.1089%" height="15" fill="rgb(210,56,17)" fg:x="7521" fg:w="36"/><text x="22.9927%" y="302.50"></text></g><g><title>find_common_type (pandas/core/dtypes/cast.py:1628) (232 samples, 0.70%)</title><rect x="22.1984%" y="260" width="0.7015%" height="15" fill="rgb(224,130,29)" fg:x="7341" fg:w="232"/><text x="22.4484%" y="270.50"></text></g><g><title>&lt;genexpr&gt; (pandas/core/dtypes/cast.py:1628) (94 samples, 0.28%)</title><rect x="22.6157%" y="276" width="0.2842%" height="15" fill="rgb(235,212,8)" fg:x="7479" fg:w="94"/><text x="22.8657%" y="286.50"></text></g><g><title>find_common_type (pandas/core/dtypes/cast.py:1630) (120 samples, 0.36%)</title><rect x="22.9029%" y="260" width="0.3629%" height="15" fill="rgb(223,33,50)" fg:x="7574" fg:w="120"/><text x="23.1529%" y="270.50"></text></g><g><title>&lt;genexpr&gt; (pandas/core/dtypes/cast.py:1630) (52 samples, 0.16%)</title><rect x="23.1086%" y="276" width="0.1572%" height="15" fill="rgb(219,149,13)" fg:x="7642" fg:w="52"/><text x="23.3586%" y="286.50"></text></g><g><title>get_dtype (pandas/core/dtypes/common.py:1579) (80 samples, 0.24%)</title><rect x="23.8434%" y="308" width="0.2419%" height="15" fill="rgb(250,156,29)" fg:x="7885" fg:w="80"/><text x="24.0934%" y="318.50"></text></g><g><title>is_bool_dtype (pandas/core/dtypes/common.py:1321) (141 samples, 0.43%)</title><rect x="23.6710%" y="292" width="0.4264%" height="15" fill="rgb(216,193,19)" fg:x="7828" fg:w="141"/><text x="23.9210%" y="302.50"></text></g><g><title>is_bool_dtype (pandas/core/dtypes/common.py:1329) (155 samples, 0.47%)</title><rect x="24.1881%" y="292" width="0.4687%" height="15" fill="rgb(216,135,14)" fg:x="7999" fg:w="155"/><text x="24.4381%" y="302.50"></text></g><g><title>_instancecheck (pandas/core/dtypes/generic.py:47) (92 samples, 0.28%)</title><rect x="24.3786%" y="308" width="0.2782%" height="15" fill="rgb(241,47,5)" fg:x="8062" fg:w="92"/><text x="24.6286%" y="318.50"></text></g><g><title>_check (pandas/core/dtypes/generic.py:41) (63 samples, 0.19%)</title><rect x="24.4663%" y="324" width="0.1905%" height="15" fill="rgb(233,42,35)" fg:x="8091" fg:w="63"/><text x="24.7163%" y="334.50"></text></g><g><title>find_common_type (pandas/core/dtypes/cast.py:1635) (545 samples, 1.65%)</title><rect x="23.2688%" y="260" width="1.6480%" height="15" fill="rgb(231,13,6)" fg:x="7695" fg:w="545"/><text x="23.5188%" y="270.50"></text></g><g><title>&lt;genexpr&gt; (pandas/core/dtypes/cast.py:1635) (487 samples, 1.47%)</title><rect x="23.4442%" y="276" width="1.4726%" height="15" fill="rgb(207,181,40)" fg:x="7753" fg:w="487"/><text x="23.6942%" y="286.50"></text></g><g><title>is_bool_dtype (pandas/core/dtypes/common.py:1335) (65 samples, 0.20%)</title><rect x="24.7203%" y="292" width="0.1966%" height="15" fill="rgb(254,173,49)" fg:x="8175" fg:w="65"/><text x="24.9703%" y="302.50"></text></g><g><title>find_common_type (numpy/core/numerictypes.py:649) (139 samples, 0.42%)</title><rect x="25.1527%" y="276" width="0.4203%" height="15" fill="rgb(221,1,38)" fg:x="8318" fg:w="139"/><text x="25.4027%" y="286.50"></text></g><g><title>&lt;listcomp&gt; (numpy/core/numerictypes.py:649) (78 samples, 0.24%)</title><rect x="25.3372%" y="292" width="0.2359%" height="15" fill="rgb(206,124,46)" fg:x="8379" fg:w="78"/><text x="25.5872%" y="302.50"></text></g><g><title>find_common_type (numpy/core/numerictypes.py:650) (43 samples, 0.13%)</title><rect x="25.5730%" y="276" width="0.1300%" height="15" fill="rgb(249,21,11)" fg:x="8457" fg:w="43"/><text x="25.8230%" y="286.50"></text></g><g><title>_can_coerce_all (numpy/core/numerictypes.py:580) (50 samples, 0.15%)</title><rect x="25.8875%" y="292" width="0.1512%" height="15" fill="rgb(222,201,40)" fg:x="8561" fg:w="50"/><text x="26.1375%" y="302.50"></text></g><g><title>_can_coerce_all (numpy/core/numerictypes.py:581) (317 samples, 0.96%)</title><rect x="26.0387%" y="292" width="0.9586%" height="15" fill="rgb(235,61,29)" fg:x="8611" fg:w="317"/><text x="26.2887%" y="302.50"></text></g><g><title>_can_coerce_all (numpy/core/numerictypes.py:582) (926 samples, 2.80%)</title><rect x="26.9973%" y="292" width="2.8001%" height="15" fill="rgb(219,207,3)" fg:x="8928" fg:w="926"/><text x="27.2473%" y="302.50">_c..</text></g><g><title>&lt;listcomp&gt; (numpy/core/numerictypes.py:582) (441 samples, 1.33%)</title><rect x="28.4639%" y="308" width="1.3335%" height="15" fill="rgb(222,56,46)" fg:x="9413" fg:w="441"/><text x="28.7139%" y="318.50"></text></g><g><title>_can_coerce_all (numpy/core/numerictypes.py:583) (38 samples, 0.11%)</title><rect x="29.7974%" y="292" width="0.1149%" height="15" fill="rgb(239,76,54)" fg:x="9854" fg:w="38"/><text x="30.0474%" y="302.50"></text></g><g><title>find_common_type (numpy/core/numerictypes.py:652) (1,454 samples, 4.40%)</title><rect x="25.7031%" y="276" width="4.3967%" height="15" fill="rgb(231,124,27)" fg:x="8500" fg:w="1454"/><text x="25.9531%" y="286.50">find_..</text></g><g><title>_can_coerce_all (numpy/core/numerictypes.py:585) (60 samples, 0.18%)</title><rect x="29.9184%" y="292" width="0.1814%" height="15" fill="rgb(249,195,6)" fg:x="9894" fg:w="60"/><text x="30.1684%" y="302.50"></text></g><g><title>fast_xs (pandas/core/internals/managers.py:1097) (3,341 samples, 10.10%)</title><rect x="20.1058%" y="228" width="10.1028%" height="15" fill="rgb(237,174,47)" fg:x="6649" fg:w="3341"/><text x="20.3558%" y="238.50">fast_xs (pandas..</text></g><g><title>interleaved_dtype (pandas/core/internals/base.py:226) (3,163 samples, 9.56%)</title><rect x="20.6441%" y="244" width="9.5646%" height="15" fill="rgb(206,201,31)" fg:x="6827" fg:w="3163"/><text x="20.8941%" y="254.50">interleaved_dt..</text></g><g><title>find_common_type (pandas/core/dtypes/cast.py:1641) (1,750 samples, 5.29%)</title><rect x="24.9168%" y="260" width="5.2918%" height="15" fill="rgb(231,57,52)" fg:x="8240" fg:w="1750"/><text x="25.1668%" y="270.50">find_c..</text></g><g><title>fast_xs (pandas/core/internals/managers.py:1099) (106 samples, 0.32%)</title><rect x="30.2086%" y="228" width="0.3205%" height="15" fill="rgb(248,177,22)" fg:x="9990" fg:w="106"/><text x="30.4586%" y="238.50"></text></g><g><title>__len__ (pandas/core/internals/base.py:48) (80 samples, 0.24%)</title><rect x="30.2873%" y="244" width="0.2419%" height="15" fill="rgb(215,211,37)" fg:x="10016" fg:w="80"/><text x="30.5373%" y="254.50"></text></g><g><title>fast_xs (pandas/core/internals/managers.py:1111) (78 samples, 0.24%)</title><rect x="30.6018%" y="228" width="0.2359%" height="15" fill="rgb(241,128,51)" fg:x="10120" fg:w="78"/><text x="30.8518%" y="238.50"></text></g><g><title>fast_xs (pandas/core/internals/managers.py:1114) (92 samples, 0.28%)</title><rect x="30.8497%" y="228" width="0.2782%" height="15" fill="rgb(227,165,31)" fg:x="10202" fg:w="92"/><text x="31.0997%" y="238.50"></text></g><g><title>fast_xs (pandas/core/internals/managers.py:1119) (767 samples, 2.32%)</title><rect x="31.2217%" y="228" width="2.3193%" height="15" fill="rgb(228,167,24)" fg:x="10325" fg:w="767"/><text x="31.4717%" y="238.50">f..</text></g><g><title>fast_xs (pandas/core/internals/managers.py:1120) (1,390 samples, 4.20%)</title><rect x="33.5410%" y="228" width="4.2032%" height="15" fill="rgb(228,143,12)" fg:x="11092" fg:w="1390"/><text x="33.7910%" y="238.50">fast_..</text></g><g><title>iget (pandas/core/internals/blocks.py:834) (539 samples, 1.63%)</title><rect x="36.1143%" y="244" width="1.6299%" height="15" fill="rgb(249,149,8)" fg:x="11943" fg:w="539"/><text x="36.3643%" y="254.50"></text></g><g><title>new_block (pandas/core/internals/blocks.py:2176) (43 samples, 0.13%)</title><rect x="38.0859%" y="244" width="0.1300%" height="15" fill="rgb(243,35,44)" fg:x="12595" fg:w="43"/><text x="38.3359%" y="254.50"></text></g><g><title>check_ndim (pandas/core/internals/blocks.py:2211) (35 samples, 0.11%)</title><rect x="38.3671%" y="260" width="0.1058%" height="15" fill="rgb(246,89,9)" fg:x="12688" fg:w="35"/><text x="38.6171%" y="270.50"></text></g><g><title>new_block (pandas/core/internals/blocks.py:2178) (124 samples, 0.37%)</title><rect x="38.2159%" y="244" width="0.3750%" height="15" fill="rgb(233,213,13)" fg:x="12638" fg:w="124"/><text x="38.4659%" y="254.50"></text></g><g><title>new_block (pandas/core/internals/blocks.py:2180) (148 samples, 0.45%)</title><rect x="38.5909%" y="244" width="0.4475%" height="15" fill="rgb(233,141,41)" fg:x="12762" fg:w="148"/><text x="38.8409%" y="254.50"></text></g><g><title>maybe_coerce_values (pandas/core/internals/blocks.py:2108) (60 samples, 0.18%)</title><rect x="39.1473%" y="260" width="0.1814%" height="15" fill="rgb(239,167,4)" fg:x="12946" fg:w="60"/><text x="39.3973%" y="270.50"></text></g><g><title>new_block (pandas/core/internals/blocks.py:2182) (154 samples, 0.47%)</title><rect x="39.0384%" y="244" width="0.4657%" height="15" fill="rgb(209,217,16)" fg:x="12910" fg:w="154"/><text x="39.2884%" y="254.50"></text></g><g><title>fast_xs (pandas/core/internals/managers.py:1126) (637 samples, 1.93%)</title><rect x="37.7684%" y="228" width="1.9262%" height="15" fill="rgb(219,88,35)" fg:x="12490" fg:w="637"/><text x="38.0184%" y="238.50">f..</text></g><g><title>new_block (pandas/core/internals/blocks.py:2183) (63 samples, 0.19%)</title><rect x="39.5041%" y="244" width="0.1905%" height="15" fill="rgb(220,193,23)" fg:x="13064" fg:w="63"/><text x="39.7541%" y="254.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:1904) (34 samples, 0.10%)</title><rect x="39.8942%" y="244" width="0.1028%" height="15" fill="rgb(230,90,52)" fg:x="13193" fg:w="34"/><text x="40.1442%" y="254.50"></text></g><g><title>_ixs (pandas/core/frame.py:3716) (6,732 samples, 20.36%)</title><rect x="19.9123%" y="212" width="20.3568%" height="15" fill="rgb(252,106,19)" fg:x="6585" fg:w="6732"/><text x="20.1623%" y="222.50">_ixs (pandas/core/frame.py:3716)</text></g><g><title>fast_xs (pandas/core/internals/managers.py:1127) (190 samples, 0.57%)</title><rect x="39.6946%" y="228" width="0.5745%" height="15" fill="rgb(206,74,20)" fg:x="13127" fg:w="190"/><text x="39.9446%" y="238.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:1915) (43 samples, 0.13%)</title><rect x="40.1391%" y="244" width="0.1300%" height="15" fill="rgb(230,138,44)" fg:x="13274" fg:w="43"/><text x="40.3891%" y="254.50"></text></g><g><title>_ixs (pandas/core/frame.py:3719) (263 samples, 0.80%)</title><rect x="40.2691%" y="212" width="0.7953%" height="15" fill="rgb(235,182,43)" fg:x="13317" fg:w="263"/><text x="40.5191%" y="222.50"></text></g><g><title>array (pandas/core/internals/base.py:170) (172 samples, 0.52%)</title><rect x="40.5443%" y="228" width="0.5201%" height="15" fill="rgb(242,16,51)" fg:x="13408" fg:w="172"/><text x="40.7943%" y="238.50"></text></g><g><title>arrays (pandas/core/internals/managers.py:287) (119 samples, 0.36%)</title><rect x="40.7046%" y="244" width="0.3598%" height="15" fill="rgb(248,9,4)" fg:x="13461" fg:w="119"/><text x="40.9546%" y="254.50"></text></g><g><title>__finalize__ (pandas/core/generic.py:5865) (56 samples, 0.17%)</title><rect x="41.6904%" y="228" width="0.1693%" height="15" fill="rgb(210,31,22)" fg:x="13787" fg:w="56"/><text x="41.9404%" y="238.50"></text></g><g><title>__finalize__ (pandas/core/generic.py:5868) (125 samples, 0.38%)</title><rect x="41.8597%" y="228" width="0.3780%" height="15" fill="rgb(239,54,39)" fg:x="13843" fg:w="125"/><text x="42.1097%" y="238.50"></text></g><g><title>__finalize__ (pandas/core/generic.py:5870) (98 samples, 0.30%)</title><rect x="42.2377%" y="228" width="0.2963%" height="15" fill="rgb(230,99,41)" fg:x="13968" fg:w="98"/><text x="42.4877%" y="238.50"></text></g><g><title>__getitem__ (pandas/core/indexes/base.py:5319) (58 samples, 0.18%)</title><rect x="42.6943%" y="228" width="0.1754%" height="15" fill="rgb(253,106,12)" fg:x="14119" fg:w="58"/><text x="42.9443%" y="238.50"></text></g><g><title>__init__ (pandas/core/generic.py:267) (62 samples, 0.19%)</title><rect x="43.1600%" y="244" width="0.1875%" height="15" fill="rgb(213,46,41)" fg:x="14273" fg:w="62"/><text x="43.4100%" y="254.50"></text></g><g><title>__init__ (pandas/core/generic.py:268) (38 samples, 0.11%)</title><rect x="43.3474%" y="244" width="0.1149%" height="15" fill="rgb(215,133,35)" fg:x="14335" fg:w="38"/><text x="43.5974%" y="254.50"></text></g><g><title>__init__ (pandas/core/series.py:359) (339 samples, 1.03%)</title><rect x="43.0511%" y="228" width="1.0251%" height="15" fill="rgb(213,28,5)" fg:x="14237" fg:w="339"/><text x="43.3011%" y="238.50"></text></g><g><title>__init__ (pandas/core/generic.py:275) (152 samples, 0.46%)</title><rect x="43.6166%" y="244" width="0.4596%" height="15" fill="rgb(215,77,49)" fg:x="14424" fg:w="152"/><text x="43.8666%" y="254.50"></text></g><g><title>__init__ (pandas/core/flags.py:51) (47 samples, 0.14%)</title><rect x="43.9341%" y="260" width="0.1421%" height="15" fill="rgb(248,100,22)" fg:x="14529" fg:w="47"/><text x="44.1841%" y="270.50"></text></g><g><title>__setattr__ (pandas/core/generic.py:5914) (333 samples, 1.01%)</title><rect x="44.1639%" y="244" width="1.0070%" height="15" fill="rgb(208,67,9)" fg:x="14605" fg:w="333"/><text x="44.4139%" y="254.50"></text></g><g><title>name (pandas/core/series.py:659) (283 samples, 0.86%)</title><rect x="44.3151%" y="260" width="0.8558%" height="15" fill="rgb(219,133,21)" fg:x="14655" fg:w="283"/><text x="44.5651%" y="270.50"></text></g><g><title>__getattr__ (pandas/core/generic.py:5902) (116 samples, 0.35%)</title><rect x="44.8201%" y="276" width="0.3508%" height="15" fill="rgb(246,46,29)" fg:x="14822" fg:w="116"/><text x="45.0701%" y="286.50"></text></g><g><title>name (pandas/core/series.py:663) (266 samples, 0.80%)</title><rect x="45.5519%" y="260" width="0.8044%" height="15" fill="rgb(246,185,52)" fg:x="15064" fg:w="266"/><text x="45.8019%" y="270.50"></text></g><g><title>validate_all_hashable (pandas/core/dtypes/common.py:1744) (165 samples, 0.50%)</title><rect x="45.8573%" y="276" width="0.4989%" height="15" fill="rgb(252,136,11)" fg:x="15165" fg:w="165"/><text x="46.1073%" y="286.50"></text></g><g><title>&lt;genexpr&gt; (pandas/core/dtypes/common.py:1744) (73 samples, 0.22%)</title><rect x="46.1355%" y="292" width="0.2207%" height="15" fill="rgb(219,138,53)" fg:x="15257" fg:w="73"/><text x="46.3855%" y="302.50"></text></g><g><title>_ixs (pandas/core/frame.py:3720) (1,785 samples, 5.40%)</title><rect x="41.0644%" y="212" width="5.3976%" height="15" fill="rgb(211,51,23)" fg:x="13580" fg:w="1785"/><text x="41.3144%" y="222.50">_ixs (p..</text></g><g><title>__init__ (pandas/core/series.py:364) (782 samples, 2.36%)</title><rect x="44.0974%" y="228" width="2.3647%" height="15" fill="rgb(247,221,28)" fg:x="14583" fg:w="782"/><text x="44.3474%" y="238.50">__..</text></g><g><title>__setattr__ (pandas/core/generic.py:5924) (353 samples, 1.07%)</title><rect x="45.3946%" y="244" width="1.0674%" height="15" fill="rgb(251,222,45)" fg:x="15012" fg:w="353"/><text x="45.6446%" y="254.50"></text></g><g><title>name (pandas/core/series.py:664) (35 samples, 0.11%)</title><rect x="46.3562%" y="260" width="0.1058%" height="15" fill="rgb(217,162,53)" fg:x="15330" fg:w="35"/><text x="46.6062%" y="270.50"></text></g><g><title>_ixs (pandas/core/frame.py:3723) (155 samples, 0.47%)</title><rect x="46.4651%" y="212" width="0.4687%" height="15" fill="rgb(229,93,14)" fg:x="15366" fg:w="155"/><text x="46.7151%" y="222.50"></text></g><g><title>_set_is_copy (pandas/core/generic.py:4120) (103 samples, 0.31%)</title><rect x="46.6223%" y="228" width="0.3115%" height="15" fill="rgb(209,67,49)" fg:x="15418" fg:w="103"/><text x="46.8723%" y="238.50"></text></g><g><title>__getitem__ (pandas/core/indexing.py:1073) (9,878 samples, 29.87%)</title><rect x="17.0729%" y="180" width="29.8700%" height="15" fill="rgb(213,87,29)" fg:x="5646" fg:w="9878"/><text x="17.3229%" y="190.50">__getitem__ (pandas/core/indexing.py:1073)</text></g><g><title>_getitem_axis (pandas/core/indexing.py:1627) (8,998 samples, 27.21%)</title><rect x="19.7339%" y="196" width="27.2090%" height="15" fill="rgb(205,151,52)" fg:x="6526" fg:w="8998"/><text x="19.9839%" y="206.50">_getitem_axis (pandas/core/indexing.py:1627)</text></g><g><title>__getitem__ (pandas/core/series.py:967) (75 samples, 0.23%)</title><rect x="46.9428%" y="180" width="0.2268%" height="15" fill="rgb(253,215,39)" fg:x="15524" fg:w="75"/><text x="47.1928%" y="190.50"></text></g><g><title>__getitem__ (pandas/core/series.py:968) (53 samples, 0.16%)</title><rect x="47.1696%" y="180" width="0.1603%" height="15" fill="rgb(221,220,41)" fg:x="15599" fg:w="53"/><text x="47.4196%" y="190.50"></text></g><g><title>_get_value (pandas/core/series.py:1089) (203 samples, 0.61%)</title><rect x="47.7170%" y="196" width="0.6138%" height="15" fill="rgb(218,133,21)" fg:x="15780" fg:w="203"/><text x="47.9670%" y="206.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3802) (127 samples, 0.38%)</title><rect x="47.9468%" y="212" width="0.3840%" height="15" fill="rgb(221,193,43)" fg:x="15856" fg:w="127"/><text x="48.1968%" y="222.50"></text></g><g><title>__getitem__ (pandas/core/series.py:981) (546 samples, 1.65%)</title><rect x="47.5627%" y="180" width="1.6510%" height="15" fill="rgb(240,128,52)" fg:x="15729" fg:w="546"/><text x="47.8127%" y="190.50"></text></g><g><title>_get_value (pandas/core/series.py:1090) (292 samples, 0.88%)</title><rect x="48.3308%" y="196" width="0.8830%" height="15" fill="rgb(253,114,12)" fg:x="15983" fg:w="292"/><text x="48.5808%" y="206.50"></text></g><g><title>_get_values_for_loc (pandas/core/indexes/base.py:5944) (223 samples, 0.67%)</title><rect x="48.5395%" y="212" width="0.6743%" height="15" fill="rgb(215,223,47)" fg:x="16052" fg:w="223"/><text x="48.7895%" y="222.50"></text></g><g><title>_values (pandas/core/series.py:740) (190 samples, 0.57%)</title><rect x="48.6393%" y="228" width="0.5745%" height="15" fill="rgb(248,225,23)" fg:x="16085" fg:w="190"/><text x="48.8893%" y="238.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:2071) (164 samples, 0.50%)</title><rect x="48.7179%" y="244" width="0.4959%" height="15" fill="rgb(250,108,0)" fg:x="16111" fg:w="164"/><text x="48.9679%" y="254.50"></text></g><g><title>estimate_effect (dowhy/causal_estimators/propensity_score_matching_estimator.py:147) (11,252 samples, 34.02%)</title><rect x="15.2888%" y="164" width="34.0248%" height="15" fill="rgb(228,208,7)" fg:x="5056" fg:w="11252"/><text x="15.5388%" y="174.50">estimate_effect (dowhy/causal_estimators/propensity_sco..</text></g><g><title>__getitem__ (pandas/core/frame.py:3759) (83 samples, 0.25%)</title><rect x="51.0070%" y="180" width="0.2510%" height="15" fill="rgb(244,45,10)" fg:x="16868" fg:w="83"/><text x="51.2570%" y="190.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:3760) (45 samples, 0.14%)</title><rect x="51.2579%" y="180" width="0.1361%" height="15" fill="rgb(207,125,25)" fg:x="16951" fg:w="45"/><text x="51.5079%" y="190.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:3761) (62 samples, 0.19%)</title><rect x="51.3940%" y="180" width="0.1875%" height="15" fill="rgb(210,195,18)" fg:x="16996" fg:w="62"/><text x="51.6440%" y="190.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:3763) (71 samples, 0.21%)</title><rect x="51.5815%" y="180" width="0.2147%" height="15" fill="rgb(249,80,12)" fg:x="17058" fg:w="71"/><text x="51.8315%" y="190.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:3766) (45 samples, 0.14%)</title><rect x="51.7962%" y="180" width="0.1361%" height="15" fill="rgb(221,65,9)" fg:x="17129" fg:w="45"/><text x="52.0462%" y="190.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:3770) (45 samples, 0.14%)</title><rect x="51.9413%" y="180" width="0.1361%" height="15" fill="rgb(235,49,36)" fg:x="17177" fg:w="45"/><text x="52.1913%" y="190.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:3771) (218 samples, 0.66%)</title><rect x="52.0774%" y="180" width="0.6592%" height="15" fill="rgb(225,32,20)" fg:x="17222" fg:w="218"/><text x="52.3274%" y="190.50"></text></g><g><title>__contains__ (pandas/core/indexes/base.py:5291) (143 samples, 0.43%)</title><rect x="52.3042%" y="196" width="0.4324%" height="15" fill="rgb(215,141,46)" fg:x="17297" fg:w="143"/><text x="52.5542%" y="206.50"></text></g><g><title>_get_item_cache (pandas/core/frame.py:4282) (176 samples, 0.53%)</title><rect x="52.9906%" y="196" width="0.5322%" height="15" fill="rgb(250,160,47)" fg:x="17524" fg:w="176"/><text x="53.2406%" y="206.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3802) (101 samples, 0.31%)</title><rect x="53.2174%" y="212" width="0.3054%" height="15" fill="rgb(216,222,40)" fg:x="17599" fg:w="101"/><text x="53.4674%" y="222.50"></text></g><g><title>__getitem__ (pandas/core/indexes/base.py:5319) (60 samples, 0.18%)</title><rect x="53.9401%" y="228" width="0.1814%" height="15" fill="rgb(234,217,39)" fg:x="17838" fg:w="60"/><text x="54.1901%" y="238.50"></text></g><g><title>_ixs (pandas/core/frame.py:3728) (188 samples, 0.57%)</title><rect x="53.6801%" y="212" width="0.5685%" height="15" fill="rgb(207,178,40)" fg:x="17752" fg:w="188"/><text x="53.9301%" y="222.50"></text></g><g><title>__getitem__ (pandas/core/indexes/base.py:5320) (42 samples, 0.13%)</title><rect x="54.1216%" y="228" width="0.1270%" height="15" fill="rgb(221,136,13)" fg:x="17898" fg:w="42"/><text x="54.3716%" y="238.50"></text></g><g><title>iget (pandas/core/internals/managers.py:1133) (94 samples, 0.28%)</title><rect x="54.3484%" y="228" width="0.2842%" height="15" fill="rgb(249,199,10)" fg:x="17973" fg:w="94"/><text x="54.5984%" y="238.50"></text></g><g><title>iget (pandas/core/internals/managers.py:1134) (139 samples, 0.42%)</title><rect x="54.6326%" y="228" width="0.4203%" height="15" fill="rgb(249,222,13)" fg:x="18067" fg:w="139"/><text x="54.8826%" y="238.50"></text></g><g><title>iget (pandas/core/internals/blocks.py:834) (52 samples, 0.16%)</title><rect x="54.8957%" y="244" width="0.1572%" height="15" fill="rgb(244,185,38)" fg:x="18154" fg:w="52"/><text x="55.1457%" y="254.50"></text></g><g><title>iget (pandas/core/internals/managers.py:1137) (88 samples, 0.27%)</title><rect x="55.0529%" y="228" width="0.2661%" height="15" fill="rgb(236,202,9)" fg:x="18206" fg:w="88"/><text x="55.3029%" y="238.50"></text></g><g><title>iget (pandas/core/internals/managers.py:1138) (43 samples, 0.13%)</title><rect x="55.3190%" y="228" width="0.1300%" height="15" fill="rgb(250,229,37)" fg:x="18294" fg:w="43"/><text x="55.5690%" y="238.50"></text></g><g><title>_ixs (pandas/core/frame.py:3730) (601 samples, 1.82%)</title><rect x="54.2486%" y="212" width="1.8174%" height="15" fill="rgb(206,174,23)" fg:x="17940" fg:w="601"/><text x="54.4986%" y="222.50">_..</text></g><g><title>iget (pandas/core/internals/managers.py:1141) (167 samples, 0.50%)</title><rect x="55.5609%" y="228" width="0.5050%" height="15" fill="rgb(211,33,43)" fg:x="18374" fg:w="167"/><text x="55.8109%" y="238.50"></text></g><g><title>__init__ (pandas/core/internals/managers.py:1915) (43 samples, 0.13%)</title><rect x="55.9359%" y="244" width="0.1300%" height="15" fill="rgb(245,58,50)" fg:x="18498" fg:w="43"/><text x="56.1859%" y="254.50"></text></g><g><title>__getitem__ (pandas/core/indexes/base.py:5319) (36 samples, 0.11%)</title><rect x="56.4076%" y="244" width="0.1089%" height="15" fill="rgb(244,68,36)" fg:x="18654" fg:w="36"/><text x="56.6576%" y="254.50"></text></g><g><title>_box_col_values (pandas/core/frame.py:4263) (122 samples, 0.37%)</title><rect x="56.1869%" y="228" width="0.3689%" height="15" fill="rgb(232,229,15)" fg:x="18581" fg:w="122"/><text x="56.4369%" y="238.50"></text></g><g><title>__finalize__ (pandas/core/generic.py:5865) (43 samples, 0.13%)</title><rect x="57.0850%" y="244" width="0.1300%" height="15" fill="rgb(254,30,23)" fg:x="18878" fg:w="43"/><text x="57.3350%" y="254.50"></text></g><g><title>__finalize__ (pandas/core/generic.py:5868) (111 samples, 0.34%)</title><rect x="57.2150%" y="244" width="0.3357%" height="15" fill="rgb(235,160,14)" fg:x="18921" fg:w="111"/><text x="57.4650%" y="254.50"></text></g><g><title>__finalize__ (pandas/core/generic.py:5870) (97 samples, 0.29%)</title><rect x="57.5507%" y="244" width="0.2933%" height="15" fill="rgb(212,155,44)" fg:x="19032" fg:w="97"/><text x="57.8007%" y="254.50"></text></g><g><title>__init__ (pandas/core/generic.py:267) (46 samples, 0.14%)</title><rect x="58.0708%" y="260" width="0.1391%" height="15" fill="rgb(226,2,50)" fg:x="19204" fg:w="46"/><text x="58.3208%" y="270.50"></text></g><g><title>__init__ (pandas/core/generic.py:268) (35 samples, 0.11%)</title><rect x="58.2099%" y="260" width="0.1058%" height="15" fill="rgb(234,177,6)" fg:x="19250" fg:w="35"/><text x="58.4599%" y="270.50"></text></g><g><title>__init__ (pandas/core/series.py:359) (310 samples, 0.94%)</title><rect x="57.9921%" y="244" width="0.9374%" height="15" fill="rgb(217,24,9)" fg:x="19178" fg:w="310"/><text x="58.2421%" y="254.50"></text></g><g><title>__init__ (pandas/core/generic.py:275) (138 samples, 0.42%)</title><rect x="58.5122%" y="260" width="0.4173%" height="15" fill="rgb(220,13,46)" fg:x="19350" fg:w="138"/><text x="58.7622%" y="270.50"></text></g><g><title>__init__ (pandas/core/flags.py:51) (39 samples, 0.12%)</title><rect x="58.8116%" y="276" width="0.1179%" height="15" fill="rgb(239,221,27)" fg:x="19449" fg:w="39"/><text x="59.0616%" y="286.50"></text></g><g><title>_ixs (pandas/core/frame.py:3731) (982 samples, 2.97%)</title><rect x="56.0659%" y="212" width="2.9695%" height="15" fill="rgb(222,198,25)" fg:x="18541" fg:w="982"/><text x="56.3159%" y="222.50">_ix..</text></g><g><title>_box_col_values (pandas/core/frame.py:4266) (796 samples, 2.41%)</title><rect x="56.6284%" y="228" width="2.4070%" height="15" fill="rgb(211,99,13)" fg:x="18727" fg:w="796"/><text x="56.8784%" y="238.50">_b..</text></g><g><title>__setattr__ (pandas/core/generic.py:5914) (189 samples, 0.57%)</title><rect x="59.3015%" y="244" width="0.5715%" height="15" fill="rgb(232,111,31)" fg:x="19611" fg:w="189"/><text x="59.5515%" y="254.50"></text></g><g><title>_get_item_cache (pandas/core/frame.py:4283) (2,209 samples, 6.68%)</title><rect x="53.5228%" y="196" width="6.6798%" height="15" fill="rgb(245,82,37)" fg:x="17700" fg:w="2209"/><text x="53.7728%" y="206.50">_get_item..</text></g><g><title>_ixs (pandas/core/frame.py:3734) (386 samples, 1.17%)</title><rect x="59.0354%" y="212" width="1.1672%" height="15" fill="rgb(227,149,46)" fg:x="19523" fg:w="386"/><text x="59.2854%" y="222.50"></text></g><g><title>_set_as_cached (pandas/core/series.py:1272) (356 samples, 1.08%)</title><rect x="59.1261%" y="228" width="1.0765%" height="15" fill="rgb(218,36,50)" fg:x="19553" fg:w="356"/><text x="59.3761%" y="238.50"></text></g><g><title>_get_item_cache (pandas/core/frame.py:4288) (88 samples, 0.27%)</title><rect x="60.2661%" y="196" width="0.2661%" height="15" fill="rgb(226,80,48)" fg:x="19930" fg:w="88"/><text x="60.5161%" y="206.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:3774) (2,581 samples, 7.80%)</title><rect x="52.7366%" y="180" width="7.8047%" height="15" fill="rgb(238,224,15)" fg:x="17440" fg:w="2581"/><text x="52.9866%" y="190.50">__getitem__..</text></g><g><title>__getitem__ (pandas/core/indexing.py:1061) (68 samples, 0.21%)</title><rect x="60.5413%" y="180" width="0.2056%" height="15" fill="rgb(241,136,10)" fg:x="20021" fg:w="68"/><text x="60.7913%" y="190.50"></text></g><g><title>__getitem__ (pandas/core/indexing.py:1072) (58 samples, 0.18%)</title><rect x="60.8013%" y="180" width="0.1754%" height="15" fill="rgb(208,32,45)" fg:x="20107" fg:w="58"/><text x="61.0513%" y="190.50"></text></g><g><title>_getitem_axis (pandas/core/indexing.py:1595) (59 samples, 0.18%)</title><rect x="61.1037%" y="196" width="0.1784%" height="15" fill="rgb(207,135,9)" fg:x="20207" fg:w="59"/><text x="61.3537%" y="206.50"></text></g><g><title>is_bool_indexer (pandas/core/common.py:124) (82 samples, 0.25%)</title><rect x="61.4968%" y="212" width="0.2480%" height="15" fill="rgb(206,86,44)" fg:x="20337" fg:w="82"/><text x="61.7468%" y="222.50"></text></g><g><title>is_bool_indexer (pandas/core/common.py:127) (66 samples, 0.20%)</title><rect x="61.7448%" y="212" width="0.1996%" height="15" fill="rgb(245,177,15)" fg:x="20419" fg:w="66"/><text x="61.9948%" y="222.50"></text></g><g><title>is_bool_dtype (pandas/core/dtypes/common.py:1321) (54 samples, 0.16%)</title><rect x="62.0260%" y="228" width="0.1633%" height="15" fill="rgb(206,64,50)" fg:x="20512" fg:w="54"/><text x="62.2760%" y="238.50"></text></g><g><title>is_bool_dtype (pandas/core/dtypes/common.py:1329) (49 samples, 0.15%)</title><rect x="62.2256%" y="228" width="0.1482%" height="15" fill="rgb(234,36,40)" fg:x="20578" fg:w="49"/><text x="62.4756%" y="238.50"></text></g><g><title>is_bool_indexer (pandas/core/common.py:138) (179 samples, 0.54%)</title><rect x="61.9444%" y="212" width="0.5413%" height="15" fill="rgb(213,64,8)" fg:x="20485" fg:w="179"/><text x="62.1944%" y="222.50"></text></g><g><title>_getitem_axis (pandas/core/indexing.py:1610) (355 samples, 1.07%)</title><rect x="61.4212%" y="196" width="1.0735%" height="15" fill="rgb(210,75,36)" fg:x="20312" fg:w="355"/><text x="61.6712%" y="206.50"></text></g><g><title>_getitem_axis (pandas/core/indexing.py:1615) (60 samples, 0.18%)</title><rect x="62.4947%" y="196" width="0.1814%" height="15" fill="rgb(229,88,21)" fg:x="20667" fg:w="60"/><text x="62.7447%" y="206.50"></text></g><g><title>is_list_like_indexer (pandas/core/indexers/utils.py:79) (38 samples, 0.11%)</title><rect x="62.5612%" y="212" width="0.1149%" height="15" fill="rgb(252,204,47)" fg:x="20689" fg:w="38"/><text x="62.8112%" y="222.50"></text></g><g><title>_protect_consolidate (pandas/core/generic.py:5965) (48 samples, 0.15%)</title><rect x="63.4563%" y="276" width="0.1451%" height="15" fill="rgb(208,77,27)" fg:x="20985" fg:w="48"/><text x="63.7063%" y="286.50"></text></g><g><title>_protect_consolidate (pandas/core/generic.py:5967) (49 samples, 0.15%)</title><rect x="63.6015%" y="276" width="0.1482%" height="15" fill="rgb(221,76,26)" fg:x="21033" fg:w="49"/><text x="63.8515%" y="286.50"></text></g><g><title>__setattr__ (pandas/core/generic.py:5915) (40 samples, 0.12%)</title><rect x="64.0339%" y="308" width="0.1210%" height="15" fill="rgb(225,139,18)" fg:x="21176" fg:w="40"/><text x="64.2839%" y="318.50"></text></g><g><title>consolidate (pandas/core/internals/managers.py:681) (53 samples, 0.16%)</title><rect x="64.1548%" y="308" width="0.1603%" height="15" fill="rgb(230,137,11)" fg:x="21216" fg:w="53"/><text x="64.4048%" y="318.50"></text></g><g><title>_protect_consolidate (pandas/core/generic.py:5968) (188 samples, 0.57%)</title><rect x="63.7496%" y="276" width="0.5685%" height="15" fill="rgb(212,28,1)" fg:x="21082" fg:w="188"/><text x="63.9996%" y="286.50"></text></g><g><title>f (pandas/core/generic.py:5978) (175 samples, 0.53%)</title><rect x="63.7889%" y="292" width="0.5292%" height="15" fill="rgb(248,164,17)" fg:x="21095" fg:w="175"/><text x="64.0389%" y="302.50"></text></g><g><title>_take (pandas/core/generic.py:3884) (450 samples, 1.36%)</title><rect x="63.0420%" y="244" width="1.3607%" height="15" fill="rgb(222,171,42)" fg:x="20848" fg:w="450"/><text x="63.2920%" y="254.50"></text></g><g><title>_consolidate_inplace (pandas/core/generic.py:5980) (363 samples, 1.10%)</title><rect x="63.3051%" y="260" width="1.0977%" height="15" fill="rgb(243,84,45)" fg:x="20935" fg:w="363"/><text x="63.5551%" y="270.50"></text></g><g><title>take (pandas/core/internals/managers.py:970) (65 samples, 0.20%)</title><rect x="64.6145%" y="260" width="0.1966%" height="15" fill="rgb(252,49,23)" fg:x="21368" fg:w="65"/><text x="64.8645%" y="270.50"></text></g><g><title>take (pandas/core/internals/managers.py:973) (295 samples, 0.89%)</title><rect x="64.8110%" y="260" width="0.8920%" height="15" fill="rgb(215,19,7)" fg:x="21433" fg:w="295"/><text x="65.0610%" y="270.50"></text></g><g><title>shape (pandas/core/internals/base.py:56) (253 samples, 0.77%)</title><rect x="64.9380%" y="276" width="0.7650%" height="15" fill="rgb(238,81,41)" fg:x="21475" fg:w="253"/><text x="65.1880%" y="286.50"></text></g><g><title>&lt;genexpr&gt; (pandas/core/internals/base.py:56) (132 samples, 0.40%)</title><rect x="65.3039%" y="292" width="0.3992%" height="15" fill="rgb(210,199,37)" fg:x="21596" fg:w="132"/><text x="65.5539%" y="302.50"></text></g><g><title>__len__ (pandas/core/indexes/base.py:929) (43 samples, 0.13%)</title><rect x="65.5730%" y="308" width="0.1300%" height="15" fill="rgb(244,192,49)" fg:x="21685" fg:w="43"/><text x="65.8230%" y="318.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexers/utils.py:278) (301 samples, 0.91%)</title><rect x="65.8875%" y="276" width="0.9102%" height="15" fill="rgb(226,211,11)" fg:x="21789" fg:w="301"/><text x="66.1375%" y="286.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexers/utils.py:279) (390 samples, 1.18%)</title><rect x="66.7977%" y="276" width="1.1793%" height="15" fill="rgb(236,162,54)" fg:x="22090" fg:w="390"/><text x="67.0477%" y="286.50"></text></g><g><title>_any (numpy/core/_methods.py:57) (319 samples, 0.96%)</title><rect x="67.0124%" y="292" width="0.9646%" height="15" fill="rgb(220,229,9)" fg:x="22161" fg:w="319"/><text x="67.2624%" y="302.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexers/utils.py:284) (414 samples, 1.25%)</title><rect x="67.9952%" y="276" width="1.2519%" height="15" fill="rgb(250,87,22)" fg:x="22486" fg:w="414"/><text x="68.2452%" y="286.50"></text></g><g><title>maybe_convert_indices (pandas/core/indexers/utils.py:285) (207 samples, 0.63%)</title><rect x="69.2471%" y="276" width="0.6259%" height="15" fill="rgb(239,43,17)" fg:x="22900" fg:w="207"/><text x="69.4971%" y="286.50"></text></g><g><title>_any (numpy/core/_methods.py:57) (175 samples, 0.53%)</title><rect x="69.3438%" y="292" width="0.5292%" height="15" fill="rgb(231,177,25)" fg:x="22932" fg:w="175"/><text x="69.5938%" y="302.50"></text></g><g><title>take (pandas/core/internals/managers.py:975) (1,376 samples, 4.16%)</title><rect x="65.7151%" y="260" width="4.1609%" height="15" fill="rgb(219,179,1)" fg:x="21732" fg:w="1376"/><text x="65.9651%" y="270.50">take ..</text></g><g><title>take (pandas/core/indexes/base.py:1177) (43 samples, 0.13%)</title><rect x="70.2207%" y="276" width="0.1300%" height="15" fill="rgb(238,219,53)" fg:x="23222" fg:w="43"/><text x="70.4707%" y="286.50"></text></g><g><title>take (pandas/core/indexes/base.py:1181) (40 samples, 0.12%)</title><rect x="70.3508%" y="276" width="0.1210%" height="15" fill="rgb(232,167,36)" fg:x="23265" fg:w="40"/><text x="70.6008%" y="286.50"></text></g><g><title>take (pandas/core/algorithms.py:1564) (62 samples, 0.19%)</title><rect x="70.6713%" y="292" width="0.1875%" height="15" fill="rgb(244,19,51)" fg:x="23371" fg:w="62"/><text x="70.9213%" y="302.50"></text></g><g><title>is_array_like (pandas/core/dtypes/inference.py:217) (41 samples, 0.12%)</title><rect x="70.7348%" y="308" width="0.1240%" height="15" fill="rgb(224,6,22)" fg:x="23392" fg:w="41"/><text x="70.9848%" y="318.50"></text></g><g><title>take (pandas/core/algorithms.py:1567) (55 samples, 0.17%)</title><rect x="70.8588%" y="292" width="0.1663%" height="15" fill="rgb(224,145,5)" fg:x="23433" fg:w="55"/><text x="71.1088%" y="302.50"></text></g><g><title>take (pandas/core/algorithms.py:1577) (147 samples, 0.44%)</title><rect x="71.0281%" y="292" width="0.4445%" height="15" fill="rgb(234,130,49)" fg:x="23489" fg:w="147"/><text x="71.2781%" y="302.50"></text></g><g><title>take (pandas/core/indexes/base.py:1183) (312 samples, 0.94%)</title><rect x="70.5352%" y="276" width="0.9435%" height="15" fill="rgb(254,6,2)" fg:x="23326" fg:w="312"/><text x="70.7852%" y="286.50"></text></g><g><title>_simple_new (pandas/core/indexes/base.py:704) (63 samples, 0.19%)</title><rect x="72.2014%" y="292" width="0.1905%" height="15" fill="rgb(208,96,46)" fg:x="23877" fg:w="63"/><text x="72.4514%" y="302.50"></text></g><g><title>_reset_identity (pandas/core/indexes/base.py:875) (37 samples, 0.11%)</title><rect x="72.2800%" y="308" width="0.1119%" height="15" fill="rgb(239,3,39)" fg:x="23903" fg:w="37"/><text x="72.5300%" y="318.50"></text></g><g><title>take (pandas/core/internals/managers.py:977) (855 samples, 2.59%)</title><rect x="69.8760%" y="260" width="2.5854%" height="15" fill="rgb(233,210,1)" fg:x="23108" fg:w="855"/><text x="70.1260%" y="270.50">ta..</text></g><g><title>take (pandas/core/indexes/base.py:1192) (300 samples, 0.91%)</title><rect x="71.5543%" y="276" width="0.9072%" height="15" fill="rgb(244,137,37)" fg:x="23663" fg:w="300"/><text x="71.8043%" y="286.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:719) (41 samples, 0.12%)</title><rect x="72.7578%" y="276" width="0.1240%" height="15" fill="rgb(240,136,2)" fg:x="24061" fg:w="41"/><text x="73.0078%" y="286.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:751) (48 samples, 0.15%)</title><rect x="73.2053%" y="292" width="0.1451%" height="15" fill="rgb(239,18,37)" fg:x="24209" fg:w="48"/><text x="73.4553%" y="302.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:871) (40 samples, 0.12%)</title><rect x="73.6589%" y="308" width="0.1210%" height="15" fill="rgb(218,185,22)" fg:x="24359" fg:w="40"/><text x="73.9089%" y="318.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:873) (37 samples, 0.11%)</title><rect x="73.7799%" y="308" width="0.1119%" height="15" fill="rgb(225,218,4)" fg:x="24399" fg:w="37"/><text x="74.0299%" y="318.50"></text></g><g><title>take_nd (pandas/core/array_algos/take.py:104) (34 samples, 0.10%)</title><rect x="74.1639%" y="324" width="0.1028%" height="15" fill="rgb(230,182,32)" fg:x="24526" fg:w="34"/><text x="74.4139%" y="334.50"></text></g><g><title>take_nd (pandas/core/array_algos/take.py:116) (39 samples, 0.12%)</title><rect x="74.2667%" y="324" width="0.1179%" height="15" fill="rgb(242,56,43)" fg:x="24560" fg:w="39"/><text x="74.5167%" y="334.50"></text></g><g><title>maybe_promote (pandas/core/dtypes/cast.py:550) (43 samples, 0.13%)</title><rect x="75.3765%" y="372" width="0.1300%" height="15" fill="rgb(233,99,24)" fg:x="24927" fg:w="43"/><text x="75.6265%" y="382.50"></text></g><g><title>maybe_promote (pandas/core/dtypes/cast.py:558) (132 samples, 0.40%)</title><rect x="75.5156%" y="372" width="0.3992%" height="15" fill="rgb(234,209,42)" fg:x="24973" fg:w="132"/><text x="75.7656%" y="382.50"></text></g><g><title>_take_preprocess_indexer_and_fill_value (pandas/core/array_algos/take.py:569) (256 samples, 0.77%)</title><rect x="75.1950%" y="356" width="0.7741%" height="15" fill="rgb(227,7,12)" fg:x="24867" fg:w="256"/><text x="75.4450%" y="366.50"></text></g><g><title>_take_preprocess_indexer_and_fill_value (pandas/core/array_algos/take.py:570) (79 samples, 0.24%)</title><rect x="75.9692%" y="356" width="0.2389%" height="15" fill="rgb(245,203,43)" fg:x="25123" fg:w="79"/><text x="76.2192%" y="366.50"></text></g><g><title>_take_preprocess_indexer_and_fill_value (pandas/core/array_algos/take.py:575) (376 samples, 1.14%)</title><rect x="76.2262%" y="356" width="1.1370%" height="15" fill="rgb(238,205,33)" fg:x="25208" fg:w="376"/><text x="76.4762%" y="366.50"></text></g><g><title>_take_preprocess_indexer_and_fill_value (pandas/core/array_algos/take.py:576) (433 samples, 1.31%)</title><rect x="77.3632%" y="356" width="1.3093%" height="15" fill="rgb(231,56,7)" fg:x="25584" fg:w="433"/><text x="77.6132%" y="366.50"></text></g><g><title>_any (numpy/core/_methods.py:57) (330 samples, 1.00%)</title><rect x="77.6746%" y="372" width="0.9979%" height="15" fill="rgb(244,186,29)" fg:x="25687" fg:w="330"/><text x="77.9246%" y="382.50"></text></g><g><title>_take_preprocess_indexer_and_fill_value (pandas/core/array_algos/take.py:582) (112 samples, 0.34%)</title><rect x="78.7239%" y="356" width="0.3387%" height="15" fill="rgb(234,111,31)" fg:x="26034" fg:w="112"/><text x="78.9739%" y="366.50"></text></g><g><title>_take_nd_ndarray (pandas/core/array_algos/take.py:134) (1,403 samples, 4.24%)</title><rect x="74.8775%" y="340" width="4.2425%" height="15" fill="rgb(241,149,10)" fg:x="24762" fg:w="1403"/><text x="75.1275%" y="350.50">_take..</text></g><g><title>_take_nd_ndarray (pandas/core/array_algos/take.py:139) (96 samples, 0.29%)</title><rect x="79.1715%" y="340" width="0.2903%" height="15" fill="rgb(249,206,44)" fg:x="26182" fg:w="96"/><text x="79.4215%" y="350.50"></text></g><g><title>_take_nd_ndarray (pandas/core/array_algos/take.py:148) (86 samples, 0.26%)</title><rect x="79.4678%" y="340" width="0.2601%" height="15" fill="rgb(251,153,30)" fg:x="26280" fg:w="86"/><text x="79.7178%" y="350.50"></text></g><g><title>_take_nd_ndarray (pandas/core/array_algos/take.py:149) (69 samples, 0.21%)</title><rect x="79.7279%" y="340" width="0.2086%" height="15" fill="rgb(239,152,38)" fg:x="26366" fg:w="69"/><text x="79.9779%" y="350.50"></text></g><g><title>_take_nd_ndarray (pandas/core/array_algos/take.py:151) (43 samples, 0.13%)</title><rect x="80.0151%" y="340" width="0.1300%" height="15" fill="rgb(249,139,47)" fg:x="26461" fg:w="43"/><text x="80.2651%" y="350.50"></text></g><g><title>_take_nd_ndarray (pandas/core/array_algos/take.py:158) (147 samples, 0.44%)</title><rect x="80.1451%" y="340" width="0.4445%" height="15" fill="rgb(244,64,35)" fg:x="26504" fg:w="147"/><text x="80.3951%" y="350.50"></text></g><g><title>_get_take_nd_function (pandas/core/array_algos/take.py:336) (110 samples, 0.33%)</title><rect x="80.9828%" y="356" width="0.3326%" height="15" fill="rgb(216,46,15)" fg:x="26781" fg:w="110"/><text x="81.2328%" y="366.50"></text></g><g><title>_take_nd_ndarray (pandas/core/array_algos/take.py:160) (256 samples, 0.77%)</title><rect x="80.5897%" y="340" width="0.7741%" height="15" fill="rgb(250,74,19)" fg:x="26651" fg:w="256"/><text x="80.8397%" y="350.50"></text></g><g><title>_take_nd_ndarray (pandas/core/array_algos/take.py:161) (44 samples, 0.13%)</title><rect x="81.3638%" y="340" width="0.1331%" height="15" fill="rgb(249,42,33)" fg:x="26907" fg:w="44"/><text x="81.6138%" y="350.50"></text></g><g><title>_take_nd_ndarray (pandas/core/array_algos/take.py:163) (554 samples, 1.68%)</title><rect x="81.4968%" y="340" width="1.6752%" height="15" fill="rgb(242,149,17)" fg:x="26951" fg:w="554"/><text x="81.7468%" y="350.50"></text></g><g><title>take_nd (pandas/core/array_algos/take.py:117) (2,921 samples, 8.83%)</title><rect x="74.3846%" y="324" width="8.8328%" height="15" fill="rgb(244,29,21)" fg:x="24599" fg:w="2921"/><text x="74.6346%" y="334.50">take_nd (pan..</text></g><g><title>take_nd (pandas/core/array_algos/take.py:95) (48 samples, 0.15%)</title><rect x="83.2174%" y="324" width="0.1451%" height="15" fill="rgb(220,130,37)" fg:x="27520" fg:w="48"/><text x="83.4674%" y="334.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:880) (3,293 samples, 9.96%)</title><rect x="73.8978%" y="308" width="9.9577%" height="15" fill="rgb(211,67,2)" fg:x="24438" fg:w="3293"/><text x="74.1478%" y="318.50">take_nd (panda..</text></g><g><title>take_nd (pandas/core/array_algos/take.py:97) (163 samples, 0.49%)</title><rect x="83.3626%" y="324" width="0.4929%" height="15" fill="rgb(235,68,52)" fg:x="27568" fg:w="163"/><text x="83.6126%" y="334.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:888) (39 samples, 0.12%)</title><rect x="83.9371%" y="308" width="0.1179%" height="15" fill="rgb(246,142,3)" fg:x="27758" fg:w="39"/><text x="84.1871%" y="318.50"></text></g><g><title>is_dtype_equal (pandas/core/dtypes/common.py:612) (57 samples, 0.17%)</title><rect x="84.3725%" y="324" width="0.1724%" height="15" fill="rgb(241,25,7)" fg:x="27902" fg:w="57"/><text x="84.6225%" y="334.50"></text></g><g><title>get_dtype (pandas/core/dtypes/common.py:1579) (92 samples, 0.28%)</title><rect x="84.8443%" y="340" width="0.2782%" height="15" fill="rgb(242,119,39)" fg:x="28058" fg:w="92"/><text x="85.0943%" y="350.50"></text></g><g><title>is_dtype_equal (pandas/core/dtypes/common.py:626) (150 samples, 0.45%)</title><rect x="84.6749%" y="324" width="0.4536%" height="15" fill="rgb(241,98,45)" fg:x="28002" fg:w="150"/><text x="84.9249%" y="334.50"></text></g><g><title>get_dtype (pandas/core/dtypes/common.py:1579) (56 samples, 0.17%)</title><rect x="85.2616%" y="340" width="0.1693%" height="15" fill="rgb(254,28,30)" fg:x="28196" fg:w="56"/><text x="85.5116%" y="350.50"></text></g><g><title>is_dtype_equal (pandas/core/dtypes/common.py:627) (105 samples, 0.32%)</title><rect x="85.1285%" y="324" width="0.3175%" height="15" fill="rgb(241,142,54)" fg:x="28152" fg:w="105"/><text x="85.3785%" y="334.50"></text></g><g><title>take_nd (pandas/core/internals/blocks.py:890) (487 samples, 1.47%)</title><rect x="84.0550%" y="308" width="1.4726%" height="15" fill="rgb(222,85,15)" fg:x="27797" fg:w="487"/><text x="84.3050%" y="318.50"></text></g><g><title>make_block_same_class (pandas/core/internals/blocks.py:244) (78 samples, 0.24%)</title><rect x="85.8089%" y="324" width="0.2359%" height="15" fill="rgb(210,85,47)" fg:x="28377" fg:w="78"/><text x="86.0589%" y="334.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:752) (4,395 samples, 13.29%)</title><rect x="73.3505%" y="292" width="13.2900%" height="15" fill="rgb(224,206,25)" fg:x="24257" fg:w="4395"/><text x="73.6005%" y="302.50">&lt;listcomp&gt; (pandas/c..</text></g><g><title>take_nd (pandas/core/internals/blocks.py:893) (368 samples, 1.11%)</title><rect x="85.5277%" y="308" width="1.1128%" height="15" fill="rgb(243,201,19)" fg:x="28284" fg:w="368"/><text x="85.7777%" y="318.50"></text></g><g><title>make_block_same_class (pandas/core/internals/blocks.py:260) (197 samples, 0.60%)</title><rect x="86.0448%" y="324" width="0.5957%" height="15" fill="rgb(236,59,4)" fg:x="28455" fg:w="197"/><text x="86.2948%" y="334.50"></text></g><g><title>&lt;listcomp&gt; (pandas/core/internals/managers.py:756) (62 samples, 0.19%)</title><rect x="86.6556%" y="292" width="0.1875%" height="15" fill="rgb(254,179,45)" fg:x="28657" fg:w="62"/><text x="86.9056%" y="302.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:751) (4,579 samples, 13.85%)</title><rect x="73.0027%" y="276" width="13.8464%" height="15" fill="rgb(226,14,10)" fg:x="24142" fg:w="4579"/><text x="73.2527%" y="286.50">reindex_indexer (pand..</text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:767) (233 samples, 0.70%)</title><rect x="86.9791%" y="276" width="0.7046%" height="15" fill="rgb(244,27,41)" fg:x="28764" fg:w="233"/><text x="87.2291%" y="286.50"></text></g><g><title>from_blocks (pandas/core/internals/managers.py:1073) (152 samples, 0.46%)</title><rect x="87.2241%" y="292" width="0.4596%" height="15" fill="rgb(235,35,32)" fg:x="28845" fg:w="152"/><text x="87.4741%" y="302.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:770) (160 samples, 0.48%)</title><rect x="87.6928%" y="276" width="0.4838%" height="15" fill="rgb(218,68,31)" fg:x="29000" fg:w="160"/><text x="87.9428%" y="286.50"></text></g><g><title>reindex_indexer (pandas/core/internals/managers.py:771) (99 samples, 0.30%)</title><rect x="88.1766%" y="276" width="0.2994%" height="15" fill="rgb(207,120,37)" fg:x="29160" fg:w="99"/><text x="88.4266%" y="286.50"></text></g><g><title>take (pandas/core/internals/managers.py:978) (5,300 samples, 16.03%)</title><rect x="72.4614%" y="260" width="16.0266%" height="15" fill="rgb(227,98,0)" fg:x="23963" fg:w="5300"/><text x="72.7114%" y="270.50">take (pandas/core/interna..</text></g><g><title>_take (pandas/core/generic.py:3886) (7,972 samples, 24.11%)</title><rect x="64.4028%" y="244" width="24.1064%" height="15" fill="rgb(207,7,3)" fg:x="21298" fg:w="7972"/><text x="64.6528%" y="254.50">_take (pandas/core/generic.py:3886)</text></g><g><title>_get_block_manager_axis (pandas/core/generic.py:574) (82 samples, 0.25%)</title><rect x="88.5999%" y="260" width="0.2480%" height="15" fill="rgb(206,98,19)" fg:x="29300" fg:w="82"/><text x="88.8499%" y="270.50"></text></g><g><title>_get_axis_number (pandas/core/generic.py:554) (42 samples, 0.13%)</title><rect x="88.7209%" y="276" width="0.1270%" height="15" fill="rgb(217,5,26)" fg:x="29340" fg:w="42"/><text x="88.9709%" y="286.50"></text></g><g><title>_take (pandas/core/generic.py:3888) (144 samples, 0.44%)</title><rect x="88.5092%" y="244" width="0.4354%" height="15" fill="rgb(235,190,38)" fg:x="29270" fg:w="144"/><text x="88.7592%" y="254.50"></text></g><g><title>__finalize__ (pandas/core/generic.py:5865) (69 samples, 0.21%)</title><rect x="89.4859%" y="260" width="0.2086%" height="15" fill="rgb(247,86,24)" fg:x="29593" fg:w="69"/><text x="89.7359%" y="270.50"></text></g><g><title>__finalize__ (pandas/core/generic.py:5868) (132 samples, 0.40%)</title><rect x="89.6946%" y="260" width="0.3992%" height="15" fill="rgb(205,101,16)" fg:x="29662" fg:w="132"/><text x="89.9446%" y="270.50"></text></g><g><title>__finalize__ (pandas/core/generic.py:5870) (87 samples, 0.26%)</title><rect x="90.0937%" y="260" width="0.2631%" height="15" fill="rgb(246,168,33)" fg:x="29794" fg:w="87"/><text x="90.3437%" y="270.50"></text></g><g><title>__init__ (pandas/core/generic.py:267) (64 samples, 0.19%)</title><rect x="90.7892%" y="276" width="0.1935%" height="15" fill="rgb(231,114,1)" fg:x="30024" fg:w="64"/><text x="91.0392%" y="286.50"></text></g><g><title>__init__ (pandas/core/generic.py:269) (42 samples, 0.13%)</title><rect x="91.0644%" y="276" width="0.1270%" height="15" fill="rgb(207,184,53)" fg:x="30115" fg:w="42"/><text x="91.3144%" y="286.50"></text></g><g><title>__init__ (pandas/core/frame.py:631) (381 samples, 1.15%)</title><rect x="90.6380%" y="260" width="1.1521%" height="15" fill="rgb(224,95,51)" fg:x="29974" fg:w="381"/><text x="90.8880%" y="270.50"></text></g><g><title>__init__ (pandas/core/generic.py:275) (157 samples, 0.47%)</title><rect x="91.3154%" y="276" width="0.4748%" height="15" fill="rgb(212,188,45)" fg:x="30198" fg:w="157"/><text x="91.5654%" y="286.50"></text></g><g><title>__init__ (pandas/core/flags.py:51) (49 samples, 0.15%)</title><rect x="91.6420%" y="292" width="0.1482%" height="15" fill="rgb(223,154,38)" fg:x="30306" fg:w="49"/><text x="91.8920%" y="302.50"></text></g><g><title>_take_with_is_copy (pandas/core/generic.py:3902) (9,552 samples, 28.88%)</title><rect x="62.9301%" y="228" width="28.8842%" height="15" fill="rgb(251,22,52)" fg:x="20811" fg:w="9552"/><text x="63.1801%" y="238.50">_take_with_is_copy (pandas/core/generic.py:390..</text></g><g><title>_take (pandas/core/generic.py:3892) (947 samples, 2.86%)</title><rect x="88.9507%" y="244" width="2.8636%" height="15" fill="rgb(229,209,22)" fg:x="29416" fg:w="947"/><text x="89.2007%" y="254.50">_t..</text></g><g><title>_get_axis (pandas/core/generic.py:566) (109 samples, 0.33%)</title><rect x="92.0562%" y="244" width="0.3296%" height="15" fill="rgb(234,138,34)" fg:x="30443" fg:w="109"/><text x="92.3062%" y="254.50"></text></g><g><title>_get_axis_number (pandas/core/generic.py:554) (43 samples, 0.13%)</title><rect x="92.2558%" y="260" width="0.1300%" height="15" fill="rgb(212,95,11)" fg:x="30509" fg:w="43"/><text x="92.5058%" y="270.50"></text></g><g><title>_get_axis (pandas/core/generic.py:568) (42 samples, 0.13%)</title><rect x="92.4403%" y="244" width="0.1270%" height="15" fill="rgb(240,179,47)" fg:x="30570" fg:w="42"/><text x="92.6903%" y="254.50"></text></g><g><title>equals (pandas/core/indexes/base.py:5523) (95 samples, 0.29%)</title><rect x="92.5673%" y="244" width="0.2873%" height="15" fill="rgb(240,163,11)" fg:x="30612" fg:w="95"/><text x="92.8173%" y="254.50"></text></g><g><title>_is_dtype_type (pandas/core/dtypes/common.py:1610) (56 samples, 0.17%)</title><rect x="93.5289%" y="276" width="0.1693%" height="15" fill="rgb(236,37,12)" fg:x="30930" fg:w="56"/><text x="93.7789%" y="286.50"></text></g><g><title>equals (pandas/core/indexes/base.py:5529) (291 samples, 0.88%)</title><rect x="92.9181%" y="244" width="0.8800%" height="15" fill="rgb(232,164,16)" fg:x="30728" fg:w="291"/><text x="93.1681%" y="254.50"></text></g><g><title>is_object_dtype (pandas/core/dtypes/common.py:189) (191 samples, 0.58%)</title><rect x="93.2204%" y="260" width="0.5776%" height="15" fill="rgb(244,205,15)" fg:x="30828" fg:w="191"/><text x="93.4704%" y="270.50"></text></g><g><title>equals (pandas/core/indexes/base.py:5533) (108 samples, 0.33%)</title><rect x="93.7980%" y="244" width="0.3266%" height="15" fill="rgb(223,117,47)" fg:x="31019" fg:w="108"/><text x="94.0480%" y="254.50"></text></g><g><title>_instancecheck (pandas/core/dtypes/generic.py:47) (66 samples, 0.20%)</title><rect x="93.9250%" y="260" width="0.1996%" height="15" fill="rgb(244,107,35)" fg:x="31061" fg:w="66"/><text x="94.1750%" y="270.50"></text></g><g><title>_check (pandas/core/dtypes/generic.py:41) (39 samples, 0.12%)</title><rect x="94.0067%" y="276" width="0.1179%" height="15" fill="rgb(205,140,8)" fg:x="31088" fg:w="39"/><text x="94.2567%" y="286.50"></text></g><g><title>equals (pandas/core/indexes/base.py:5537) (46 samples, 0.14%)</title><rect x="94.1246%" y="244" width="0.1391%" height="15" fill="rgb(228,84,46)" fg:x="31127" fg:w="46"/><text x="94.3746%" y="254.50"></text></g><g><title>equals (pandas/core/indexes/base.py:5545) (98 samples, 0.30%)</title><rect x="94.2637%" y="244" width="0.2963%" height="15" fill="rgb(254,188,9)" fg:x="31173" fg:w="98"/><text x="94.5137%" y="254.50"></text></g><g><title>array_equivalent (pandas/core/dtypes/missing.py:501) (34 samples, 0.10%)</title><rect x="94.7536%" y="260" width="0.1028%" height="15" fill="rgb(206,112,54)" fg:x="31335" fg:w="34"/><text x="95.0036%" y="270.50"></text></g><g><title>array_equivalent (pandas/core/dtypes/missing.py:504) (60 samples, 0.18%)</title><rect x="94.8564%" y="260" width="0.1814%" height="15" fill="rgb(216,84,49)" fg:x="31369" fg:w="60"/><text x="95.1064%" y="270.50"></text></g><g><title>_take_with_is_copy (pandas/core/generic.py:3904) (1,068 samples, 3.23%)</title><rect x="91.8143%" y="228" width="3.2295%" height="15" fill="rgb(214,194,35)" fg:x="30363" fg:w="1068"/><text x="92.0643%" y="238.50">_ta..</text></g><g><title>equals (pandas/core/indexes/base.py:5549) (160 samples, 0.48%)</title><rect x="94.5600%" y="244" width="0.4838%" height="15" fill="rgb(249,28,3)" fg:x="31271" fg:w="160"/><text x="94.8100%" y="254.50"></text></g><g><title>__setattr__ (pandas/core/generic.py:5914) (35 samples, 0.11%)</title><rect x="95.3160%" y="260" width="0.1058%" height="15" fill="rgb(222,56,52)" fg:x="31521" fg:w="35"/><text x="95.5660%" y="270.50"></text></g><g><title>_take_with_is_copy (pandas/core/generic.py:3905) (163 samples, 0.49%)</title><rect x="95.0438%" y="228" width="0.4929%" height="15" fill="rgb(245,217,50)" fg:x="31431" fg:w="163"/><text x="95.2938%" y="238.50"></text></g><g><title>_set_is_copy (pandas/core/generic.py:4120) (113 samples, 0.34%)</title><rect x="95.1950%" y="244" width="0.3417%" height="15" fill="rgb(213,201,24)" fg:x="31481" fg:w="113"/><text x="95.4450%" y="254.50"></text></g><g><title>__setattr__ (pandas/core/generic.py:5915) (38 samples, 0.11%)</title><rect x="95.4218%" y="260" width="0.1149%" height="15" fill="rgb(248,116,28)" fg:x="31556" fg:w="38"/><text x="95.6718%" y="270.50"></text></g><g><title>__getitem__ (pandas/core/indexing.py:1073) (11,430 samples, 34.56%)</title><rect x="60.9767%" y="180" width="34.5630%" height="15" fill="rgb(219,72,43)" fg:x="20165" fg:w="11430"/><text x="61.2267%" y="190.50">__getitem__ (pandas/core/indexing.py:1073)</text></g><g><title>_getitem_axis (pandas/core/indexing.py:1616) (10,868 samples, 32.86%)</title><rect x="62.6761%" y="196" width="32.8636%" height="15" fill="rgb(209,138,14)" fg:x="20727" fg:w="10868"/><text x="62.9261%" y="206.50">_getitem_axis (pandas/core/indexing.py:1616)</text></g><g><title>_get_list_axis (pandas/core/indexing.py:1587) (10,827 samples, 32.74%)</title><rect x="62.8001%" y="212" width="32.7396%" height="15" fill="rgb(222,18,33)" fg:x="20768" fg:w="10827"/><text x="63.0501%" y="222.50">_get_list_axis (pandas/core/indexing.py:1587)</text></g><g><title>item (pandas/core/base.py:345) (192 samples, 0.58%)</title><rect x="95.6214%" y="180" width="0.5806%" height="15" fill="rgb(213,199,7)" fg:x="31622" fg:w="192"/><text x="95.8714%" y="190.50"></text></g><g><title>__len__ (pandas/core/series.py:768) (132 samples, 0.40%)</title><rect x="95.8028%" y="196" width="0.3992%" height="15" fill="rgb(250,110,10)" fg:x="31682" fg:w="132"/><text x="96.0528%" y="206.50"></text></g><g><title>__len__ (pandas/core/internals/base.py:48) (99 samples, 0.30%)</title><rect x="95.9026%" y="212" width="0.2994%" height="15" fill="rgb(248,123,6)" fg:x="31715" fg:w="99"/><text x="96.1526%" y="222.50"></text></g><g><title>__iter__ (pandas/core/base.py:755) (239 samples, 0.72%)</title><rect x="96.5679%" y="196" width="0.7227%" height="15" fill="rgb(206,91,31)" fg:x="31935" fg:w="239"/><text x="96.8179%" y="206.50"></text></g><g><title>_values (pandas/core/series.py:740) (183 samples, 0.55%)</title><rect x="96.7372%" y="212" width="0.5534%" height="15" fill="rgb(211,154,13)" fg:x="31991" fg:w="183"/><text x="96.9872%" y="222.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:2071) (150 samples, 0.45%)</title><rect x="96.8370%" y="228" width="0.4536%" height="15" fill="rgb(225,148,7)" fg:x="32024" fg:w="150"/><text x="97.0870%" y="238.50"></text></g><g><title>estimate_effect (dowhy/causal_estimators/propensity_score_matching_estimator.py:148) (16,089 samples, 48.65%)</title><rect x="49.3136%" y="164" width="48.6513%" height="15" fill="rgb(220,160,43)" fg:x="16308" fg:w="16089"/><text x="49.5636%" y="174.50">estimate_effect (dowhy/causal_estimators/propensity_score_matching_estimator.py:..</text></g><g><title>item (pandas/core/base.py:346) (583 samples, 1.76%)</title><rect x="96.2020%" y="180" width="1.7629%" height="15" fill="rgb(213,52,39)" fg:x="31814" fg:w="583"/><text x="96.4520%" y="190.50"></text></g><g><title>__iter__ (pandas/core/base.py:759) (223 samples, 0.67%)</title><rect x="97.2906%" y="196" width="0.6743%" height="15" fill="rgb(243,137,7)" fg:x="32174" fg:w="223"/><text x="97.5406%" y="206.50"></text></g><g><title>_values (pandas/core/series.py:740) (79 samples, 0.24%)</title><rect x="97.7260%" y="212" width="0.2389%" height="15" fill="rgb(230,79,13)" fg:x="32318" fg:w="79"/><text x="97.9760%" y="222.50"></text></g><g><title>internal_values (pandas/core/internals/managers.py:2071) (41 samples, 0.12%)</title><rect x="97.8409%" y="228" width="0.1240%" height="15" fill="rgb(247,105,23)" fg:x="32356" fg:w="41"/><text x="98.0909%" y="238.50"></text></g><g><title>estimate_effect (dowhy/causal_estimators/propensity_score_matching_estimator.py:149) (51 samples, 0.15%)</title><rect x="97.9649%" y="164" width="0.1542%" height="15" fill="rgb(223,179,41)" fg:x="32397" fg:w="51"/><text x="98.2149%" y="174.50"></text></g><g><title>run_experiment (sensitivity_albumin_for_sepsis.py:202) (31,900 samples, 96.46%)</title><rect x="1.6601%" y="84" width="96.4621%" height="15" fill="rgb(218,9,34)" fg:x="549" fg:w="31900"/><text x="1.9101%" y="94.50">run_experiment (sensitivity_albumin_for_sepsis.py:202)</text></g><g><title>get_confidence_intervals (dowhy/causal_estimator.py:800) (31,900 samples, 96.46%)</title><rect x="1.6601%" y="100" width="96.4621%" height="15" fill="rgb(222,106,8)" fg:x="549" fg:w="31900"/><text x="1.9101%" y="110.50">get_confidence_intervals (dowhy/causal_estimator.py:800)</text></g><g><title>estimate_confidence_intervals (dowhy/causal_estimator.py:399) (31,900 samples, 96.46%)</title><rect x="1.6601%" y="116" width="96.4621%" height="15" fill="rgb(211,220,0)" fg:x="549" fg:w="31900"/><text x="1.9101%" y="126.50">estimate_confidence_intervals (dowhy/causal_estimator.py:399)</text></g><g><title>_estimate_confidence_intervals_with_bootstrap (dowhy/causal_estimator.py:341) (31,900 samples, 96.46%)</title><rect x="1.6601%" y="132" width="96.4621%" height="15" fill="rgb(229,52,16)" fg:x="549" fg:w="31900"/><text x="1.9101%" y="142.50">_estimate_confidence_intervals_with_bootstrap (dowhy/causal_estimator.py:341)</text></g><g><title>_generate_bootstrap_estimates (dowhy/causal_estimator.py:304) (31,767 samples, 96.06%)</title><rect x="2.0623%" y="148" width="96.0599%" height="15" fill="rgb(212,155,18)" fg:x="682" fg:w="31767"/><text x="2.3123%" y="158.50">_generate_bootstrap_estimates (dowhy/causal_estimator.py:304)</text></g><g><title>call (joblib/memory.py:779) (464 samples, 1.40%)</title><rect x="98.1494%" y="132" width="1.4031%" height="15" fill="rgb(242,21,14)" fg:x="32458" fg:w="464"/><text x="98.3994%" y="142.50"></text></g><g><title>get_albumin_events_zhou_baseline (selection.py:322) (464 samples, 1.40%)</title><rect x="98.1494%" y="148" width="1.4031%" height="15" fill="rgb(222,19,48)" fg:x="32458" fg:w="464"/><text x="98.3994%" y="158.50"></text></g><g><title>collect (polars/lazyframe/frame.py:1599) (464 samples, 1.40%)</title><rect x="98.1494%" y="164" width="1.4031%" height="15" fill="rgb(232,45,27)" fg:x="32458" fg:w="464"/><text x="98.3994%" y="174.50"></text></g><g><title>run_experiment (sensitivity_albumin_for_sepsis.py:84) (470 samples, 1.42%)</title><rect x="98.1464%" y="84" width="1.4212%" height="15" fill="rgb(249,103,42)" fg:x="32457" fg:w="470"/><text x="98.3964%" y="94.50"></text></g><g><title>__call__ (joblib/memory.py:594) (470 samples, 1.42%)</title><rect x="98.1464%" y="100" width="1.4212%" height="15" fill="rgb(246,81,33)" fg:x="32457" fg:w="470"/><text x="98.3964%" y="110.50"></text></g><g><title>_cached_call (joblib/memory.py:537) (469 samples, 1.42%)</title><rect x="98.1494%" y="116" width="1.4182%" height="15" fill="rgb(252,33,42)" fg:x="32458" fg:w="469"/><text x="98.3994%" y="126.50"></text></g><g><title>&lt;module&gt; (sensitivity_albumin_for_sepsis.py:216) (32,806 samples, 99.20%)</title><rect x="0.3810%" y="68" width="99.2017%" height="15" fill="rgb(209,212,41)" fg:x="126" fg:w="32806"/><text x="0.6310%" y="78.50">&lt;module&gt; (sensitivity_albumin_for_sepsis.py:216)</text></g><g><title>run (joblib/externals/loky/process_executor.py:563) (56 samples, 0.17%)</title><rect x="99.8246%" y="100" width="0.1693%" height="15" fill="rgb(207,154,6)" fg:x="33012" fg:w="56"/><text x="100.0746%" y="110.50"></text></g><g><title>process_result_item (joblib/externals/loky/process_executor.py:688) (43 samples, 0.13%)</title><rect x="99.8639%" y="116" width="0.1300%" height="15" fill="rgb(223,64,47)" fg:x="33025" fg:w="43"/><text x="100.1139%" y="126.50"></text></g><g><title>__call__ (multiprocessing/util.py:224) (43 samples, 0.13%)</title><rect x="99.8639%" y="132" width="0.1300%" height="15" fill="rgb(211,161,38)" fg:x="33025" fg:w="43"/><text x="100.1139%" y="142.50"></text></g><g><title>all (33,070 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(219,138,40)" fg:x="0" fg:w="33070"/><text x="0.2500%" y="62.50"></text></g><g><title>_bootstrap (threading.py:973) (58 samples, 0.18%)</title><rect x="99.8246%" y="68" width="0.1754%" height="15" fill="rgb(241,228,46)" fg:x="33012" fg:w="58"/><text x="100.0746%" y="78.50"></text></g><g><title>_bootstrap_inner (threading.py:1016) (58 samples, 0.18%)</title><rect x="99.8246%" y="84" width="0.1754%" height="15" fill="rgb(223,209,38)" fg:x="33012" fg:w="58"/><text x="100.0746%" y="94.50"></text></g></svg></svg>